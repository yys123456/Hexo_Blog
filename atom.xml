<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yys_c</title>
  
  
  <link href="/yys123456.github.io/atom.xml" rel="self"/>
  
  <link href="https://yys123456.github.io/"/>
  <updated>2019-08-13T02:50:30.947Z</updated>
  <id>https://yys123456.github.io/</id>
  
  <author>
    <name>yu yan song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pat-1043输出PATest</title>
    <link href="https://yys123456.github.io/2019/08/13/%E6%96%B0%E5%8D%9A%E6%96%87/"/>
    <id>https://yys123456.github.io/2019/08/13/新博文/</id>
    <published>2019-08-13T02:25:24.000Z</published>
    <updated>2019-08-13T02:50:30.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1043-输出PATest-20-分"><a href="#1043-输出PATest-20-分" class="headerlink" title="1043 输出PATest (20 分)"></a>1043 输出PATest (20 分)</h3><p>给定一个长度不超过 104 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 <code>PATestPATest....</code> 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过 104 的、仅由英文字母构成的非空字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redlesPayBestPATTopTeePHPereatitAPPT</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATestPATestPTetPTePePee</span><br></pre></td></tr></table></figure><h3 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h3><p>题目要求从前向后扫描字符串，然后经过适当的排序和删除，按照PATest的模式，输出处理后的字符串。</p><p>过程</p><ol><li>将所有不包含在PATest中的字符排除掉；</li><li>将包含在PATest中的字符适当地排序；</li><li>按照PATest模式输出字符串。</li></ol><p>所谓按照PATest模式输出，就是输出字符地顺序一定是按照PATest地顺序输出，不论中间是否缺少其他字符，比如缺少T，那么就要输出PAest。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我的思路与读题中的字面上的思路完全不同，因为考虑到不断地对字符串选择和排序，会造成极高的时间复杂度。所以我考虑从字符的个数方面来考虑。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li><strong>输出字符串中只有$’P’,’A’,’T’,’e’,’s’,’t’$这五种字符，所以我可以直接忽略其他字符</strong></li><li><strong>发现最终输出的结果，输出$PATest$是从完整的$PATest$到不完整的$PATest$，所以我可以建立一个仓库，这个仓库存放这所有的可供分配的$’P’,’A’,’T’,’e’,’s’,’t’$字符，然后每次都尽可能完整的输出$PATest$子串。</strong></li><li>利用短板效应，能够输出$PATest$顺序的<strong>组合</strong>（<strong>不一定是完整的</strong>$PATest$）取决于储存数量最少的那一种字符，所以需要找到<strong>存储最少</strong>的那一种字符，就可以得出<strong>当前这种$PATest$模式的组合</strong>可以最多输出多少个。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">char</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> t[]=&#123;<span class="string">'P'</span>,<span class="string">'A'</span>,<span class="string">'T'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>&#125;;</span><br><span class="line">node a[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">a[i].t=<span class="number">0</span>;</span><br><span class="line">        a[i].m=t[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())!=<span class="string">'\n'</span>)&#123;</span><br><span class="line"><span class="keyword">switch</span>(c)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'P'</span>:a[<span class="number">0</span>].t++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:a[<span class="number">1</span>].t++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'T'</span>:a[<span class="number">2</span>].t++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'e'</span>:a[<span class="number">3</span>].t++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:a[<span class="number">4</span>].t++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'t'</span>:a[<span class="number">5</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> min=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        s=<span class="string">""</span>;</span><br><span class="line">        min=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].t==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)a[j<span class="number">-1</span>]=a[j];</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[min].t&gt;a[i].t)min=i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> r=a[min].t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            a[i].t-=r;</span><br><span class="line">            s+=a[i].m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java代码（4号测试点内存超限）"><a href="#Java代码（4号测试点内存超限）" class="headerlink" title="Java代码（4号测试点内存超限）"></a>Java代码（4号测试点内存超限）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">char</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    node[] a;</span><br><span class="line">    Scanner scn;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[] t=<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'P'</span>,<span class="string">'A'</span>,<span class="string">'T'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>&#125;;</span><br><span class="line">    Main()&#123;</span><br><span class="line">        scn=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        a=<span class="keyword">new</span> node[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            a[i]=<span class="keyword">new</span> node();</span><br><span class="line">            a[i].m=t[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        String s1=scn.next();</span><br><span class="line">        <span class="keyword">int</span> e=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(e&lt;s1.length())&#123;</span><br><span class="line">            <span class="keyword">switch</span>((s1.toCharArray())[e])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'P'</span>:a[<span class="number">0</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'A'</span>:a[<span class="number">1</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'T'</span>:a[<span class="number">2</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:a[<span class="number">3</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:a[<span class="number">4</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'t'</span>:a[<span class="number">5</span>].t++;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            e++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//System.out.println(len);</span></span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].t==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)a[j-<span class="number">1</span>]=a[j];</span><br><span class="line">                    len--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> min=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[min].t&gt;a[i].t)min=i;</span><br><span class="line">            &#125;</span><br><span class="line">            String s=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> r=a[min].t;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                a[i].t-=r;</span><br><span class="line">                s+=a[i].m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">                System.out.print(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Main m=<span class="keyword">new</span> Main();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1043-输出PATest-20-分&quot;&gt;&lt;a href=&quot;#1043-输出PATest-20-分&quot; class=&quot;headerlink&quot; title=&quot;1043 输出PATest (20 分)&quot;&gt;&lt;/a&gt;1043 输出PATest (20 分)&lt;/h3&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1043" scheme="https://yys123456.github.io/tags/1043/"/>
    
  </entry>
  
  <entry>
    <title>n元买n鸡问题</title>
    <link href="https://yys123456.github.io/2019/08/13/n%E5%85%83%E4%B9%B0n%E9%B8%A1%E9%97%AE%E9%A2%98/"/>
    <id>https://yys123456.github.io/2019/08/13/n元买n鸡问题/</id>
    <published>2019-08-13T01:14:36.000Z</published>
    <updated>2019-08-13T01:17:35.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态链表的应用"><a href="#静态链表的应用" class="headerlink" title="静态链表的应用"></a>静态链表的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Method</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> g,m,x;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(g+<span class="string">" "</span>+m+<span class="string">" "</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Scanner scn;</span><br><span class="line">    <span class="keyword">static</span> Method[] a=<span class="keyword">new</span> Method[<span class="number">100</span>];<span class="comment">//资源</span></span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ks=<span class="number">0</span>; </span><br><span class="line">    Main()&#123;</span><br><span class="line">        <span class="comment">//初始化仓库</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            a[i]=<span class="keyword">new</span> Method();</span><br><span class="line">            a[i].next=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[a.length-<span class="number">1</span>]=<span class="keyword">new</span> Method();</span><br><span class="line">        a[a.length-<span class="number">1</span>].next=-<span class="number">1</span>;</span><br><span class="line">        head=malloc();</span><br><span class="line">        a[head].next=-<span class="number">1</span>;</span><br><span class="line">        scn=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n=scn.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n/<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((n-i-j&gt;=<span class="number">0</span>)&amp;&amp;(n-i-j)%<span class="number">3</span>==<span class="number">0</span>&amp;&amp;(i*<span class="number">5</span>+j*<span class="number">3</span>+(n-i-j)/<span class="number">3</span>)==n)&#123;</span><br><span class="line">                    ks++;</span><br><span class="line">                    <span class="keyword">int</span> p=malloc();</span><br><span class="line">                    <span class="keyword">if</span>(p!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        a[p].g=i;</span><br><span class="line">                        a[p].m=j;</span><br><span class="line">                        a[p].x=n-i-j;</span><br><span class="line">                        a[p].next=a[head].next;</span><br><span class="line">                        a[head].next=p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">malloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>].next==-<span class="number">1</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i=a[<span class="number">0</span>].next;</span><br><span class="line">            a[<span class="number">0</span>].next=a[i].next;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ks==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"No Answer!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q=a[head].next;</span><br><span class="line">        <span class="keyword">while</span>(q!=-<span class="number">1</span>)&#123;</span><br><span class="line">            a[q].show();</span><br><span class="line">            q=a[q].next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Main m=<span class="keyword">new</span> Main();</span><br><span class="line">        m.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态链表的应用&quot;&gt;&lt;a href=&quot;#静态链表的应用&quot; class=&quot;headerlink&quot; title=&quot;静态链表的应用&quot;&gt;&lt;/a&gt;静态链表的应用&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="https://yys123456.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="n元买n鸡问题" scheme="https://yys123456.github.io/tags/n%E5%85%83%E4%B9%B0n%E9%B8%A1%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>pat-1015 德才论</title>
    <link href="https://yys123456.github.io/2019/08/12/pat-1015/"/>
    <id>https://yys123456.github.io/2019/08/12/pat-1015/</id>
    <published>2019-08-12T14:22:18.000Z</published>
    <updated>2019-08-12T14:32:03.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1015-德才论-25-分"><a href="#1015-德才论-25-分" class="headerlink" title="1015 德才论 (25 分)"></a>1015 德才论 (25 分)</h3><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤105），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按<strong>总分</strong>排序，但排在第三类考生之后。</p><p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分<strong>降序</strong>排列；若德分也并列，则按准考证号的<strong>升序</strong>输出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题数据的输入没有任何问题，有两个难点</p><ol><li><strong>对输入数据的筛选；</strong></li><li><strong>对所筛选的各批数据的排序操作。</strong></li></ol><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> id;</span><br><span class="line"><span class="keyword">int</span> de;</span><br><span class="line"><span class="keyword">int</span> cai;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="built_in">string</span> i,<span class="keyword">int</span> d,<span class="keyword">int</span> c):id(i),de(d),cai(c)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;id&lt;&lt;<span class="string">' '</span>&lt;&lt;de&lt;&lt;<span class="string">' '</span>&lt;&lt;cai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> de+cai;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp;,<span class="keyword">const</span> Student&amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;Student&gt;&amp;v)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">v[i].show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp;,<span class="keyword">const</span> Student&amp;)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt;v1,v2,v3,v4;</span><br><span class="line"><span class="keyword">int</span> ps=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N,H,L;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N&gt;&gt;L&gt;&gt;H;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> id;</span><br><span class="line"><span class="keyword">int</span> de,cai;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;id&gt;&gt;de&gt;&gt;cai;</span><br><span class="line"><span class="keyword">if</span>(de&gt;=L&amp;&amp;cai&gt;=L)&#123;</span><br><span class="line">ps++;</span><br><span class="line"><span class="function">Student <span class="title">s</span><span class="params">(id,de,cai)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(de&gt;=H&amp;&amp;cai&gt;=H)v1.push_back(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(de&gt;=H&amp;&amp;cai&lt;H)v2.push_back(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(de&lt;H&amp;&amp;cai&gt;=H)v4.push_back(s);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cai&lt;=de)v3.push_back(s);</span><br><span class="line"><span class="keyword">else</span> v4.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(v1.begin(),v1.end(),cmp);</span><br><span class="line">sort(v2.begin(),v2.end(),cmp);</span><br><span class="line">sort(v3.begin(),v3.end(),cmp);</span><br><span class="line">sort(v4.begin(),v4.end(),cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">show(v1);</span><br><span class="line">show(v2);</span><br><span class="line">show(v3);</span><br><span class="line">show(v4);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp;s1,<span class="keyword">const</span> Student&amp;s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum1=s1.sum();</span><br><span class="line"><span class="keyword">int</span> sum2=s2.sum();</span><br><span class="line"><span class="keyword">if</span>(sum1&lt;sum2)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sum1==sum2)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.de&gt;s2.de)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.de==s2.de)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.id&lt;s2.id)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="keyword">int</span> cai,de;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id,<span class="keyword">int</span> cai,<span class="keyword">int</span> de)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">        <span class="keyword">this</span>.cai=cai;</span><br><span class="line">        <span class="keyword">this</span>.de=de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(id+<span class="string">" "</span>+de+<span class="string">" "</span>+cai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; s1,s2,s3,s4;</span><br><span class="line">    <span class="keyword">int</span> ps;<span class="comment">//达线人数</span></span><br><span class="line">    <span class="keyword">int</span> N,L,H;</span><br><span class="line">    Scanner scn;</span><br><span class="line">    Main()&#123;</span><br><span class="line">        s1=<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        s2=<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        s3=<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        s4=<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        ps=<span class="number">0</span>;</span><br><span class="line">        scn=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        N=scn.nextInt();</span><br><span class="line">        L=scn.nextInt();</span><br><span class="line">        H=scn.nextInt();</span><br><span class="line">        process();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            String id;</span><br><span class="line">            <span class="keyword">int</span> cai,de;</span><br><span class="line">            Student s;</span><br><span class="line">            id=scn.next();</span><br><span class="line">            de=scn.nextInt();</span><br><span class="line">            cai=scn.nextInt();</span><br><span class="line">            s=<span class="keyword">new</span> Student(id,cai,de);</span><br><span class="line">            <span class="keyword">if</span>(de&gt;=L&amp;&amp;cai&gt;=L)&#123;</span><br><span class="line">                ps++;</span><br><span class="line">                <span class="keyword">if</span>(cai&gt;=H&amp;&amp;de&gt;=H)&#123;</span><br><span class="line">                    s1.add(s);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cai&lt;H&amp;&amp;de&gt;=H)&#123;</span><br><span class="line">                    s2.add(s);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cai&gt;=H&amp;&amp;de&lt;H)&#123;</span><br><span class="line">                    s4.add(s);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cai&lt;=de)&#123;</span><br><span class="line">                        s3.add(s);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        s4.add(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(ArrayList&lt;Student&gt;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Student t:s)&#123;</span><br><span class="line">            t.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//展示四类考生信息</span></span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        cmp c=<span class="keyword">new</span> cmp();</span><br><span class="line">        Collections.sort(s1,c);</span><br><span class="line">        Collections.sort(s2,c);</span><br><span class="line">        Collections.sort(s3,c);</span><br><span class="line">        Collections.sort(s4,c);</span><br><span class="line">        display(s1);</span><br><span class="line">        display(s2);</span><br><span class="line">        display(s3);</span><br><span class="line">        display(s4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Main m=<span class="keyword">new</span> Main();</span><br><span class="line">        m.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1,Object o2)</span> </span>&#123;</span><br><span class="line">        Student p1=(Student)o1;</span><br><span class="line">        Student p2=(Student)o2;</span><br><span class="line">        <span class="keyword">int</span> sum1=p1.cai+p1.de;</span><br><span class="line">        <span class="keyword">int</span> sum2=p2.cai+p2.de;</span><br><span class="line">        <span class="keyword">if</span>(sum1&lt;sum2)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(sum1==sum2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p1.de&lt;p2.de)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(p1.de==p2.de)&#123;</span><br><span class="line">                    <span class="comment">//比较学号</span></span><br><span class="line">                    <span class="keyword">if</span>(p1.id.compareTo(p2.id)&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1015-德才论-25-分&quot;&gt;&lt;a href=&quot;#1015-德才论-25-分&quot; class=&quot;headerlink&quot; title=&quot;1015 德才论 (25 分)&quot;&gt;&lt;/a&gt;1015 德才论 (25 分)&lt;/h3&gt;&lt;p&gt;宋代史学家司马光在《资治通鉴》中有一段著名的
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1015" scheme="https://yys123456.github.io/tags/1015/"/>
    
  </entry>
  
  <entry>
    <title>pat-1012数字分类</title>
    <link href="https://yys123456.github.io/2019/08/11/pat-1012/"/>
    <id>https://yys123456.github.io/2019/08/11/pat-1012/</id>
    <published>2019-08-11T14:14:41.000Z</published>
    <updated>2019-08-11T14:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1012-数字分类-20-分"><a href="#1012-数字分类-20-分" class="headerlink" title="1012 数字分类 (20 分)"></a>1012 数字分类 (20 分)</h3><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li><li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li><li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li><li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li></ul><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N 11 2 N 9</span><br></pre></td></tr></table></figure><h3 id="本题思路"><a href="#本题思路" class="headerlink" title="本题思路"></a>本题思路</h3><p>思路很简单，先将所有备用数据存储再数组中，然后从前向后遍历数组，并对每一个元素进行相应的判断，但是这一题<strong>最需要注意的地方不是对于$A1-A5$的计算，而是对$A1-A5$中每一个值是否计算出来的判断，即需要使用一种方法来判断在输出$A1-A5$时是否以N来替代的问题。</strong></p><p>设想一种非常理想的情况，$A1-A5$都存在，所以输出也变得简单，只需要对每一个按照题目格式输出即可，但是<strong>不理想的情况就是$A1-A5$中有一些值由于原本数据给的不好而造成的不存在问题</strong>。</p><p>对于这种问题应该如何去处理，需要对$A1-A5$分别考虑：</p><p><strong><em>A</em>1 = 能被 5 整除的数字中所有偶数的和（都是正整数）</strong></p><p>设置A1初值为0</p><script type="math/tex; mode=display">A1不存在\longrightarrow{A1==0}</script><p><strong><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</strong></p><p>由于交错求和结果可能为0，所以也就不可以用结果是否为0来判断A2是否存在了，所以需要引入满足A2条件的数的个数K2，K2初值设为0</p><script type="math/tex; mode=display">A2不存在\longrightarrow{K2==0}</script><p><strong><em>A</em>3 = 被 5 除后余 2 的数字的个数；</strong></p><p>设置A3初值为0</p><script type="math/tex; mode=display">A3不存在\longrightarrow{A3==0}</script><p><strong><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</strong></p><p>设置A4初值为0</p><p>由于A4计算的是正整数的平均值所以也可以得到A4若存在则A4必定大于0</p><script type="math/tex; mode=display">A4不存在\longrightarrow{A4==0}</script><p><strong><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</strong></p><p>设置A5初值为0</p><script type="math/tex; mode=display">A5不存在\longrightarrow{A5==0}</script><p><strong>综上：得出A2需要特殊对待（即在在输出A2时决定是否替代输出N由K2是否等于0决定）。</strong></p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a;<span class="comment">//保存数据</span></span><br><span class="line">Scanner scn;</span><br><span class="line"><span class="keyword">int</span> a1=<span class="number">0</span>,a2=<span class="number">0</span>,a3=<span class="number">0</span>,a5=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> plain=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a4=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k4=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">scn=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">N=scn.nextInt();</span><br><span class="line">a=<span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">a[i]=scn.nextInt();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t:a)&#123;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">a1+=t;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">5</span>==<span class="number">1</span>)&#123;</span><br><span class="line">k2++;</span><br><span class="line">a2+=t*flag;</span><br><span class="line">flag=-flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">5</span>==<span class="number">2</span>)&#123;</span><br><span class="line">a3++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">5</span>==<span class="number">3</span>)&#123;</span><br><span class="line">k4++;</span><br><span class="line">a4+=(<span class="keyword">double</span>)t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">5</span>==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a5&lt;t)</span><br><span class="line">a5=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a4/=(k4==<span class="number">0</span>?<span class="number">1</span>:k4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">double</span> t)</span></span>&#123;</span><br><span class="line">System.out.print((t==<span class="number">0</span>?<span class="string">"N"</span>:String.format(<span class="string">"%.1f"</span>,t))+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">plain++;</span><br><span class="line"><span class="keyword">if</span>(plain==<span class="number">2</span>)&#123;</span><br><span class="line">System.out.print((k2==<span class="number">0</span>?<span class="string">"N"</span>:String.format(<span class="string">"%d"</span>,t))+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(plain&lt;<span class="number">4</span>)&#123;</span><br><span class="line">System.out.print((t==<span class="number">0</span>?<span class="string">"N"</span>:String.format(<span class="string">"%d"</span>,t))+<span class="string">" "</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println((t==<span class="number">0</span>?<span class="string">"N"</span>:String.format(<span class="string">"%d"</span>,t)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">display(a1);</span><br><span class="line">display(a2);</span><br><span class="line">display(a3);</span><br><span class="line">display(a4);</span><br><span class="line">display(a5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Main m=<span class="keyword">new</span> Main();</span><br><span class="line">m.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1012-数字分类-20-分&quot;&gt;&lt;a href=&quot;#1012-数字分类-20-分&quot; class=&quot;headerlink&quot; title=&quot;1012 数字分类 (20 分)&quot;&gt;&lt;/a&gt;1012 数字分类 (20 分)&lt;/h3&gt;&lt;p&gt;给定一系列正整数，请按要求对数字进行
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1012" scheme="https://yys123456.github.io/tags/1012/"/>
    
  </entry>
  
  <entry>
    <title>pat输出叶子结点</title>
    <link href="https://yys123456.github.io/2019/08/11/pat%E8%BE%93%E5%87%BA%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/"/>
    <id>https://yys123456.github.io/2019/08/11/pat输出叶子结点/</id>
    <published>2019-08-11T06:34:15.000Z</published>
    <updated>2019-08-11T14:42:20.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-4-List-Leaves-25-分"><a href="#7-4-List-Leaves-25-分" class="headerlink" title="7-4 List Leaves (25 分)"></a>7-4 List Leaves (25 分)</h3><p>Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case.  For each case, the first line gives a positive integer <em>N</em> (≤10) which is the total number of nodes in the tree — and hence the nodes are numbered from 0 to <em>N</em>−1.  Then <em>N</em> lines follow, each corresponds to a node, and gives the indices of the left and right children of the node.  If the child does not exist, a “-“ will be put at the position.  Any pair of children are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line all the leaves’ indices in the order of top down, and left to right.  There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 -</span><br><span class="line">- -</span><br><span class="line">0 -</span><br><span class="line">2 7</span><br><span class="line">- -</span><br><span class="line">- -</span><br><span class="line">5 -</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 5</span><br></pre></td></tr></table></figure><h3 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h3><p>输入数据给出结点个数N，并且给出每一个结点（0~N-1）的左右孩子结点情况，需要得到这个二叉树的所有叶子结点的序号。并且要求输出叶子结点时需要按照不同深度从上到下，同一深度从左向右的顺序输出叶子结点的序号。</p><p>输入数据分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8   #总结点个数#</span><br><span class="line">1 - #0号结点的左右孩子情况#</span><br><span class="line">- - #1号结点的左右孩子情况#</span><br><span class="line">0 -#2号结点的左右孩子情况#</span><br><span class="line">2 7#3号结点的左右孩子情况#</span><br><span class="line">- -#4号结点的左右孩子情况#</span><br><span class="line">- - #...#</span><br><span class="line">5 - #...#</span><br><span class="line">4 6 #7号结点的左右孩子情况#</span><br></pre></td></tr></table></figure><p>通过输入的数据情况，很容易就可以得到一个结论：<strong>3号结点是根结点</strong>。</p><p>因为3号结点不作为任何一个结点的孩子结点，即3号结点没有前驱结点。</p><p>所以只要从3号结点进入进行广度优先遍历（因为用广度优先遍历出来的顺序符合→，↓）就可以将整棵树走一遍了，然后在将整棵树走一遍的过程中，必然会遇到叶子结点，而叶子结点就是我所需要的结点，将代表叶子结点的序号保存起来即可。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>找到根节点；</li><li>从根节点进入二叉树；</li><li>对二叉树进行广度优先遍历；</li><li>遍历过程中，如果遇到没有左右孩子的结点，就存储起来；</li><li>遍历完成之后，输出存储好的叶子结点。</li></ol><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><h4 id="算法实现大致过程"><a href="#算法实现大致过程" class="headerlink" title="算法实现大致过程"></a>算法实现大致过程</h4><ol><li>通过一些方式找到整型值root；</li><li>从root开始广度优先遍历，并找叶子结点；</li><li>按顺序输出叶子结点。</li></ol><h4 id="对二叉树的广度优先遍历"><a href="#对二叉树的广度优先遍历" class="headerlink" title="对二叉树的广度优先遍历"></a>对二叉树的广度优先遍历</h4><p>对二叉树的广度优先遍历和图的广度优先遍历非常类似，但是更加简单，因为没有以下问题</p><ol><li>连通性（二叉树一定是无向连通图）；</li><li>设置标记数组的问题（二叉树从根出发，一定只会向下走，而不会再回头看，即某一个结点相邻的结点并不包含它的双亲结点，而是只有它的孩子结点）；</li><li>起点设置问题（起点只能为根结点）。</li></ol><h5 id="遍历过程（借助队列）"><a href="#遍历过程（借助队列）" class="headerlink" title="遍历过程（借助队列）"></a>遍历过程（借助队列）</h5><ol><li>检查二叉树是否只有根结点？只有根结点转到2：转到3；</li><li>根结点就是唯一的<strong>叶子（既作为根也作为叶子）</strong>结点，访问它，转到9；</li><li>将根结点入队，转到4；</li><li>判断队列是否为空？转到9：转到5；</li><li>取出队列的队首（front）元素x，并得到此队首元素的左右孩子lc、rc，然后让x出队；</li><li>判断lc是否为空，若不为空（表明是一个结点），访问它，然后入队；</li><li>判断rc是否为空，若不为空（表明是一个结点），访问它，然后入队；</li><li>转到4；</li><li>结束。</li></ol><p><strong>注意，在这个算法中，我一定会保证不让空结点入队。</strong></p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; bits / stdc++.h &gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> lc;</span><br><span class="line">  <span class="keyword">char</span> rc;</span><br><span class="line">&#125;Tnode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N; <span class="comment">//结点范围是0~N-1</span></span><br><span class="line">  <span class="keyword">int</span> * ved;<span class="comment">//用来得到根结点</span></span><br><span class="line">  <span class="keyword">int</span> root;<span class="comment">//根结点序号</span></span><br><span class="line">  <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; v; <span class="comment">//存放所有叶子 </span></span><br><span class="line">  <span class="built_in">queue</span> &lt; <span class="keyword">char</span> &gt; q1; <span class="comment">//做广度优先搜索 因为结点的左右孩子数据妥协于'-'所以用char</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">  ved = <span class="keyword">new</span> <span class="keyword">int</span>[N](); </span><br><span class="line">  Tnode * p = <span class="keyword">new</span> Tnode[N]; <span class="comment">//存放各个结点数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="string">'-'</span>) ved[a - <span class="string">'0'</span>]++;</span><br><span class="line">    p[i].lc = a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="string">'-'</span>) ved[a - <span class="string">'0'</span>]++;</span><br><span class="line">    p[i].rc = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ved[i] == <span class="number">0</span>) &#123;</span><br><span class="line">      root = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//得到根节点入口为root</span></span><br><span class="line">  <span class="comment">//此处的广度优先遍历将‘访问’换成了‘判断是否为叶子并存储’</span></span><br><span class="line">  <span class="keyword">if</span> (p[root].lc == <span class="string">'-'</span> &amp;&amp; p[root].rc == <span class="string">'-'</span>) v.push_back(root); <span class="comment">//只有一个根节点</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    q1.push(root + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q1.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q1.front() - <span class="string">'0'</span>;</span><br><span class="line">      q1.pop();</span><br><span class="line">      <span class="keyword">char</span> lc = p[u].lc;</span><br><span class="line">      <span class="keyword">char</span> rc = p[u].rc;</span><br><span class="line">      <span class="keyword">if</span> (lc != <span class="string">'-'</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (p[lc - <span class="string">'0'</span>].lc == <span class="string">'-'</span> &amp;&amp; p[lc - <span class="string">'0'</span>].rc == <span class="string">'-'</span>) v.push_back(lc - <span class="string">'0'</span>);</span><br><span class="line">        q1.push(lc);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rc != <span class="string">'-'</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (p[rc - <span class="string">'0'</span>].lc == <span class="string">'-'</span> &amp;&amp; p[rc - <span class="string">'0'</span>].rc == <span class="string">'-'</span>) v.push_back(rc - <span class="string">'0'</span>);</span><br><span class="line">        q1.push(rc);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == v.size() - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>[] ved;</span><br><span class="line">  <span class="keyword">delete</span>[] p;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;7-4-List-Leaves-25-分&quot;&gt;&lt;a href=&quot;#7-4-List-Leaves-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-4 List Leaves (25 分)&quot;&gt;&lt;/a&gt;7-4 List Leaves (25 分)&lt;/
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="7-4" scheme="https://yys123456.github.io/tags/7-4/"/>
    
  </entry>
  
  <entry>
    <title>pat-1041</title>
    <link href="https://yys123456.github.io/2019/08/10/pat-1041/"/>
    <id>https://yys123456.github.io/2019/08/10/pat-1041/</id>
    <published>2019-08-10T05:21:14.000Z</published>
    <updated>2019-08-10T05:22:30.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1041-考试座位号-15-分"><a href="#1041-考试座位号-15-分" class="headerlink" title="1041 考试座位号 (15 分)"></a>1041 考试座位号 (15 分)</h3><p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（≤1000），随后 <em>N</em> 行，每行给出一个考生的信息：<code>准考证号 试机座位号 考试座位号</code>。其中<code>准考证号</code>由 16 位数字组成，座位从 1 到 <em>N</em> 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p><p>考生信息之后，给出一个正整数 <em>M</em>（≤<em>N</em>），随后一行中给出 <em>M</em> 个待查询的试机座位号码，以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3310120150912233 2 4</span><br><span class="line">3310120150912119 4 1</span><br><span class="line">3310120150912126 1 3</span><br><span class="line">3310120150912002 3 2</span><br><span class="line">2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3310120150912002 2</span><br><span class="line">3310120150912119 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> a;<span class="comment">//准考证号 </span></span><br><span class="line"><span class="keyword">int</span> b;<span class="comment">//座位号 </span></span><br><span class="line"><span class="keyword">int</span> c;<span class="comment">//考试座位号 </span></span><br><span class="line">&#125;xxx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">xxx*t;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">t=<span class="keyword">new</span> xxx[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;b&gt;&gt;c;</span><br><span class="line">t[b<span class="number">-1</span>].a=s;</span><br><span class="line">t[b<span class="number">-1</span>].b=b;</span><br><span class="line">t[b<span class="number">-1</span>].c=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t[p<span class="number">-1</span>].a&lt;&lt;<span class="string">' '</span>&lt;&lt;t[p<span class="number">-1</span>].c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] t;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1041-考试座位号-15-分&quot;&gt;&lt;a href=&quot;#1041-考试座位号-15-分&quot; class=&quot;headerlink&quot; title=&quot;1041 考试座位号 (15 分)&quot;&gt;&lt;/a&gt;1041 考试座位号 (15 分)&lt;/h3&gt;&lt;p&gt;每个 PAT 考生在参加考试
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1041" scheme="https://yys123456.github.io/tags/1041/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://yys123456.github.io/2019/08/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://yys123456.github.io/2019/08/10/快速排序/</id>
    <published>2019-08-10T03:30:48.000Z</published>
    <updated>2019-08-10T05:00:47.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>快速排序是一种含有递归思想的排序方法，主要思想是<strong>分而治之</strong>。对于一整个的线性表，对其进行快速排序就是对这个线性表的不同部分进行快速排序。</p><p>注意，快速排序并不是一个一次完成的过程，使用快速排序的方法对一个顺序表进行排序需要对这个线性表进行多次快速排序过程。</p><h3 id="递归算法过程"><a href="#递归算法过程" class="headerlink" title="递归算法过程"></a>递归算法过程</h3><p>假设对整型数组T（它可能是一个数组，也可能是一个子数组）进行非递减排序</p><h4 id="定义一趟快速排序（需要原料低位指针low，高位指针high）"><a href="#定义一趟快速排序（需要原料低位指针low，高位指针high）" class="headerlink" title="定义一趟快速排序（需要原料低位指针low，高位指针high）"></a>定义一趟快速排序（需要原料低位指针low，高位指针high）</h4><ol><li>保存低位low所指向的值temp（枢轴记录，这个值决定了返回的枢轴）；</li><li>使用指针high从后向前扫描（期间满足high&gt;low），找到第一个使得T[high]&lt;temp的high，然后让T[low]=T[high]；</li><li>使用指针low从前向后扫描（期间满足high&gt;low，注意high已经改变）,找到第一个使得T[low]&gt;temp的low，然后让T[high]=T[low];</li><li>low&lt;high?转到2：转到5；</li><li>令T[low]=temp;</li><li>将low作为pivot返回。</li></ol><h4 id="对整个数组T使用快速排序算法（QSort）的过程（不断地利用一趟快速排序）"><a href="#对整个数组T使用快速排序算法（QSort）的过程（不断地利用一趟快速排序）" class="headerlink" title="对整个数组T使用快速排序算法（QSort）的过程（不断地利用一趟快速排序）"></a>对整个数组T使用快速排序算法（QSort）的过程（不断地利用一趟快速排序）</h4><ol><li>进入QSort(low,high)；</li><li>接受决定排序部位地low，high指针；</li><li>判断low&lt;high?转到3：不予排序；</li><li>对low，high之间地元素使用一次快速排序，得到返回值k；</li><li>递归调用QSort(low,k-1)（枢轴的前面）;</li><li>递归调用QSort(k+1,high)（枢轴的后面）;</li></ol><h4 id="C-代码的算法实现部分"><a href="#C-代码的算法实现部分" class="headerlink" title="C++代码的算法实现部分"></a>C++代码的算法实现部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPivot</span><span class="params">(node*L,<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span>,<span class="keyword">char</span>))</span></span>&#123;<span class="comment">//一次快排</span></span><br><span class="line">node temp=L[low];</span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;cmp(L[high].data,temp.data))high--;</span><br><span class="line">L[low]=L[high];</span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;cmp(temp.data,L[low].data))low++;</span><br><span class="line">L[high]=L[low];</span><br><span class="line">&#125;</span><br><span class="line">L[low]=temp;</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">(node*L,<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span>,<span class="keyword">char</span>))</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line"><span class="keyword">int</span> t=getPivot(L,low,high,cmp);</span><br><span class="line">Qsort(L,low,t<span class="number">-1</span>,cmp);</span><br><span class="line">Qsort(L,t+<span class="number">1</span>,high,cmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归算法过程"><a href="#非递归算法过程" class="headerlink" title="非递归算法过程"></a>非递归算法过程</h3><p>使用非递归快速排序，需要借助栈来实现，思想仍然是<strong>分治</strong>。</p><h4 id="借助栈来实现非递归的快排QSort，过程如下"><a href="#借助栈来实现非递归的快排QSort，过程如下" class="headerlink" title="借助栈来实现非递归的快排QSort，过程如下"></a>借助栈来实现非递归的快排QSort，过程如下</h4><ol><li>进入QSort(low,high);</li><li>接受决定排序部位地low，high指针；</li><li>判断low&lt;high?转到3：不予排序；</li><li>将low，high分别压栈（此处正式进入分治的过程）；</li><li>判断当前栈是否为空，若为空则转到11，否则将栈顶的两个元素进行弹栈i和j，分别作为high和low（注意顺序）；</li><li>i&lt;j?转到7：转到5；</li><li>使用一次快排，得到枢轴k；</li><li>如果i&lt;k，则将i压栈，k压栈；</li><li>如果k&lt;j，将k压栈，j压栈；</li><li>转到5；</li><li>结束。</li></ol><p><strong>实际上栈中存放的元素就是需要进行快排的low，high元素对。</strong></p><h4 id="C-算法实现部分代码"><a href="#C-算法实现部分代码" class="headerlink" title="C++算法实现部分代码"></a>C++算法实现部分代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort1</span><span class="params">(node*L,<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span>,<span class="keyword">char</span>))</span></span>&#123;</span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;p;</span><br><span class="line">p.push(low);</span><br><span class="line">p.push(high);</span><br><span class="line"><span class="keyword">while</span>(!p.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> i=p.top();<span class="comment">//h</span></span><br><span class="line">p.pop();</span><br><span class="line"><span class="keyword">int</span> j=p.top();<span class="comment">//l</span></span><br><span class="line">p.pop();</span><br><span class="line"><span class="keyword">int</span> t=getPivot(L,j,i,cmp);<span class="comment">//单次快排</span></span><br><span class="line"><span class="keyword">if</span>(t&gt;j)&#123;</span><br><span class="line">p.push(j);</span><br><span class="line">p.push(t<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t&lt;i)&#123;</span><br><span class="line">p.push(t+<span class="number">1</span>);</span><br><span class="line">p.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度</p><script type="math/tex; mode=display">O(nlogn)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h3&gt;&lt;p&gt;快速排序是一种含有递归思想的排序方法，主要思想是&lt;strong&gt;分而治之&lt;/strong&gt;。对于一整个的线性表，对其进行快速
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="快速排序" scheme="https://yys123456.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="https://yys123456.github.io/2019/08/09/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://yys123456.github.io/2019/08/09/插入排序/</id>
    <published>2019-08-09T12:55:56.000Z</published>
    <updated>2019-08-10T03:26:10.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>对于一个线性表，将这个线性表分为有序和无序的两个部分，对无序部分进行扫描，并对扫描到的每一个元素考虑它应当在有序部分插入的位置（保证插入之后仍为有序），然后将这个元素插入到有序部分，此后，逐渐扩大有序部分，直到整个线性表。</p><p>对于一个未经排序的线性表，认为第一个元素是有序的，然后进行$n-1$次的插入排序。即从线性表的第二个元素开始依次向后，对每一个元素考虑它要插入在有序部分的位置，然后进行插入操作。</p><h3 id="算法步骤（以非递减排序为例，即线性表中的有序部分是非递减的）"><a href="#算法步骤（以非递减排序为例，即线性表中的有序部分是非递减的）" class="headerlink" title="算法步骤（以非递减排序为例，即线性表中的有序部分是非递减的）"></a>算法步骤（以非递减排序为例，即线性表中的有序部分是非递减的）</h3><ol><li>从第二个元素开始向后扫描线性表（取每一个无序部分的元素进行操作）；</li><li>判断1中$i$位置取出的元素x和它前面的那个元素$y_t (t=i-1)$的大小关系，如果大于等于就回到1，否则转到3；</li><li>此时x小于等于$y_t$，所以要进行x插入位置的确定，转到4；</li><li>将$y_t$向后移动一位，然后再判断x和$y_{t}(t=t-1)$的大小关系，直到到了某一个$t$的值使得$y_t≤x或者t==-1$时将$x$赋值给$y_{t+1}$，然后转到1。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//插入排序 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> len=<span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(node*L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;L[i].data&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;L[i].index&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(node*L,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span>,<span class="keyword">char</span>))</span></span>&#123;<span class="comment">//认为第一个是有序的，进行len-1次插入排序 从小到大排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="comment">//首先判断是否有必要进行插入排序</span></span><br><span class="line"><span class="keyword">if</span>(!cmp(L[i].data,L[i<span class="number">-1</span>].data))&#123;</span><br><span class="line">node temp=L[i];</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;cmp(L[j].data,temp.data);j--)</span><br><span class="line">L[j+<span class="number">1</span>]=L[j];</span><br><span class="line">L[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">node line[]=&#123;&#123;<span class="string">'B'</span>,<span class="number">0</span>&#125;,&#123;<span class="string">'A'</span>,<span class="number">1</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">2</span>&#125;,&#123;<span class="string">'Z'</span>,<span class="number">3</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">4</span>&#125;,&#123;<span class="string">'E'</span>,<span class="number">5</span>&#125;,&#123;<span class="string">'A'</span>,<span class="number">6</span>&#125;,&#123;<span class="string">'S'</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"before:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">show(line);</span><br><span class="line">insertSort(line,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"after:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">show(line);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p><p>before:<br>B A D Z M E A S<br>0 1 2 3 4 5 6 7<br>after:<br>A A B D E M S Z<br>6 1 0 2 5 4 7 3</p></blockquote><p>通过运行结果可以发现，直接插入排序是不稳定的。</p><p>时间复杂度分析</p><p>因为对于一个线性表中的每一个元素而言，移动的次数都不是统一的，所以考虑<strong>最坏情况下</strong>的时间复杂度，及将一个非递增的线性表插入排序成为非递减线性表，可得总移动次数为</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(i-1)=\frac{(n-1)\times{n}}{2}=\frac{n^2-n}{2}</script><p>所以可得时间复杂度为$O(n^2)$。</p><h3 id="对于一般的数组应用插入排序"><a href="#对于一般的数组应用插入排序" class="headerlink" title="对于一般的数组应用插入排序"></a>对于一般的数组应用插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>*a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>*a,<span class="keyword">int</span> n,<span class="keyword">bool</span>(*cmp)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>&#123;<span class="comment">//非递减排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[i];</span><br><span class="line"><span class="keyword">if</span>(!cmp(temp,a[i<span class="number">-1</span>]))&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;cmp(a[j],temp);j--)&#123;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">&#125;</span><br><span class="line">a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">a=<span class="keyword">new</span> <span class="keyword">int</span>[n]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"before:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">show(a,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"after:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">insertSort(a,n,cmp);</span><br><span class="line">show(a,n);</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>程序测试</p><p>5<br>5 5 5 5 5<br>before:<br>5 5 5 5 5<br>after:<br>5 5 5 5 5</p><p>5<br>5 4 3 2 1<br>before:<br>5 4 3 2 1<br>after:<br>1 2 3 4 5</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h3&gt;&lt;p&gt;对于一个线性表，将这个线性表分为有序和无序的两个部分，对无序部分进行扫描，并对扫描到的每一个元素考虑它应当在有序部分插入的位
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="直接插入排序" scheme="https://yys123456.github.io/tags/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>pat-1040 pat的个数 解析</title>
    <link href="https://yys123456.github.io/2019/08/09/pat-1040/"/>
    <id>https://yys123456.github.io/2019/08/09/pat-1040/</id>
    <published>2019-08-09T10:35:49.000Z</published>
    <updated>2019-08-11T14:44:04.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1040-有几个PAT-25-分"><a href="#1040-有几个PAT-25-分" class="headerlink" title="1040 有几个PAT (25 分)"></a>1040 有几个PAT (25 分)</h3><p>字符串 <code>APPAPT</code> 中包含了两个单词 <code>PAT</code>，其中第一个 <code>PAT</code> 是第 2 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)；第二个 <code>PAT</code> 是第 3 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)。</p><p>现给定字符串，问一共可以形成多少个 <code>PAT</code>？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入只有一行，包含一个字符串，长度不超过105，只包含 <code>P</code>、<code>A</code>、<code>T</code> 三种字母。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出给定字符串中包含多少个 <code>PAT</code>。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPAPT</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>本题一开始我使用了深度优先搜索，并使用一个全局变量bk来做本递归和上层递归之间的通信从而减少操作次数（想复杂了）3、4测试点超时，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">3</span>]=&#123;<span class="string">'P'</span>,<span class="string">'A'</span>,<span class="string">'T'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> bk=<span class="number">0</span>;<span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span>&amp;s,<span class="keyword">int</span> k,<span class="keyword">int</span> flag)</span></span>&#123;<span class="comment">//appapt</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">3</span>)&#123;</span><br><span class="line">count1++;</span><br><span class="line">count1%=<span class="number">1000000007</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(bk)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ff=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=flag;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==a[k])&#123;</span><br><span class="line">ff=<span class="number">1</span>;</span><br><span class="line">dfs(s,k+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff==<span class="number">0</span>)&#123;</span><br><span class="line">bk=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">dfs(s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上本题是使用数学方法解决</p><p>观察一个字符串$APPAPT$，可以发现对于这个字符串而言，$PAT$这按顺序排放的三个字符出现的次数是2，简单来说就是从前向后扫描这个字符串，找到第一个P然后从P的下一个位置开始向后找第一个A，找到第一个A以后，再在这个位置的下一个位置去找第一个T，若找到那么总个数加一，由此可见可以用递归或者三重循环解决。但是由于不加处理的三冲循环或者递归的时间复杂度可以达到$O(n^3)$，所以考虑别的方法。</p><p>观察发现：</p><ol><li>对于每一个A，这个<strong>A前面的所有P的个数</strong>决定了这个A所带来的PA组合的个数；</li><li>对于每一个T，这个T前面的所有<strong>A所对应的PA组合的个数</strong>（因为每一个不同的A就对应了不同的PAT组合）<strong>相加</strong>就得到了这个T它可以决定的所有PAT组合的个数。</li><li>而对于一个串里面所有PAT的个数就是对于每一个T所对应的PAT的个数求和。</li></ol><p>时间复杂度$O(n)$。</p><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有自底向上的思想</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>,a=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'P'</span>:p++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:a+=p;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'T'</span>:t+=a;<span class="keyword">break</span>;<span class="comment">//这个地方之所以用+=符号，是因为会出现多个t</span></span><br><span class="line">&#125;</span><br><span class="line">t%=<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他方法（排列组合的思想）</p><p>遍历字符串，对于每一个A来说的PAT的个数就是对于每一个A，它前面的P的个数和它后面的T的个数相乘。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> Ts=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'T'</span>)&#123;</span><br><span class="line">Ts++;<span class="comment">//所有T的个数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'P'</span>:p++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'T'</span>:Ts--;<span class="keyword">break</span>;<span class="comment">//间接体现A后面的T的个数</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>:sum+=(p%<span class="number">1000000007</span>)*(Ts%<span class="number">1000000007</span>)%<span class="number">1000000007</span>;sum%=<span class="number">1000000007</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1040-有几个PAT-25-分&quot;&gt;&lt;a href=&quot;#1040-有几个PAT-25-分&quot; class=&quot;headerlink&quot; title=&quot;1040 有几个PAT (25 分)&quot;&gt;&lt;/a&gt;1040 有几个PAT (25 分)&lt;/h3&gt;&lt;p&gt;字符串 &lt;code&gt;
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1040" scheme="https://yys123456.github.io/tags/1040/"/>
    
  </entry>
  
  <entry>
    <title>1051-复数乘积</title>
    <link href="https://yys123456.github.io/2019/08/03/pat-1051/"/>
    <id>https://yys123456.github.io/2019/08/03/pat-1051/</id>
    <published>2019-08-03T09:48:37.000Z</published>
    <updated>2019-08-03T09:53:08.353Z</updated>
    
    <content type="html"><![CDATA[<p>本题复数乘积需要注意：实部或虚部的绝对值小于0.005被认为是0的近似。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> a,b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Complex(<span class="keyword">double</span> a,<span class="keyword">double</span> b):a(a),b(b)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;out,<span class="keyword">const</span> Complex c);</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex&amp;c1,<span class="keyword">const</span> Complex&amp;c2)&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(c1.a*c2.a+(<span class="number">-1</span>)*(c1.b*c2.b),c1.a*c2.b+c1.b*c2.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;out,Complex c)&#123;</span><br><span class="line">out&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(c.a)&lt;<span class="number">0.005</span>)c.a=+<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(c.b)&lt;<span class="number">0.005</span>)c.b=+<span class="number">0</span>;</span><br><span class="line">out&lt;&lt;c.a;</span><br><span class="line">out&lt;&lt;(c.b&gt;=<span class="number">0</span>?<span class="string">"+"</span>:<span class="string">""</span>);</span><br><span class="line">out&lt;&lt;c.b&lt;&lt;<span class="string">"i"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a,b,c,d;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(Complex(a*<span class="built_in">cos</span>(b),a*<span class="built_in">sin</span>(b))*Complex(c*<span class="built_in">cos</span>(d),c*<span class="built_in">sin</span>(d)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本题复数乘积需要注意：实部或虚部的绝对值小于0.005被认为是0的近似。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1051" scheme="https://yys123456.github.io/tags/1051/"/>
    
  </entry>
  
  <entry>
    <title>大整数除法</title>
    <link href="https://yys123456.github.io/2019/07/30/%E5%A4%A7%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/"/>
    <id>https://yys123456.github.io/2019/07/30/大整数除法/</id>
    <published>2019-07-30T11:56:21.000Z</published>
    <updated>2019-08-10T05:32:00.655Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span>&amp;a,<span class="built_in">string</span>&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.length()&gt;b.length())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.length()==b.length())&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//a==b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">jian</span><span class="params">(<span class="built_in">string</span>&amp;a,<span class="built_in">string</span>&amp;b)</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span>*,<span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b1[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">p(a1,a);</span><br><span class="line">p(b1,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length()||i&lt;b.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a1[i]&gt;=b1[i])&#123;</span><br><span class="line">c[i]=a1[i]-b1[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c[i]=a1[i]-b1[i]+<span class="number">10</span>;</span><br><span class="line">a1[i+<span class="number">1</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len=a.length()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(c[len]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">0</span>)len--;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">s+=c[i]+<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span>*a,<span class="built_in">string</span>&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">a[b.length()<span class="number">-1</span>-i]=b[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span>&amp;a,<span class="built_in">string</span>&amp;b)</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span>*,<span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b1[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">p(a1,a);</span><br><span class="line">p(b1,b);</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length()||i&lt;b.length();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=a1[i]+b1[i]+x;</span><br><span class="line">c[i]=t%<span class="number">10</span>;</span><br><span class="line">x=t/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len=max(a.length(),b.length());</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">c[len++]=x%<span class="number">10</span>;</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c[len]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">0</span>)len--;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">s+=c[i]+<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="built_in">string</span> c1=<span class="string">"0"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(cmp(a,b))</span><br><span class="line"><span class="keyword">while</span>(cmp(a,b))&#123;</span><br><span class="line"><span class="built_in">string</span> c=<span class="string">"1"</span>;</span><br><span class="line"><span class="built_in">string</span> b1=b;</span><br><span class="line"><span class="keyword">while</span>(cmp(a,b1))&#123;</span><br><span class="line">b1+=<span class="string">'0'</span>;</span><br><span class="line">c+=<span class="string">'0'</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="string">"1"</span>)&#123;</span><br><span class="line">b1=b1.substr(<span class="number">0</span>,b1.length()<span class="number">-1</span>);</span><br><span class="line">c=c.substr(<span class="number">0</span>,c.length()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">a=jian(a,b1);</span><br><span class="line">c1=add(c1,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c1&lt;&lt;<span class="string">' '</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="https://yys123456.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="大整数操作" scheme="https://yys123456.github.io/tags/%E5%A4%A7%E6%95%B4%E6%95%B0%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>暴力法求模式串匹配</title>
    <link href="https://yys123456.github.io/2019/07/29/%E6%9A%B4%E5%8A%9B%E6%B3%95%E6%B1%82%E6%A8%A1%E5%BC%8F%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>https://yys123456.github.io/2019/07/29/暴力法求模式串匹配/</id>
    <published>2019-07-29T09:55:26.000Z</published>
    <updated>2019-07-29T09:56:47.912Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1029</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;s1.length())&#123;<span class="comment">//&amp;&amp;j&lt;s2.length()</span></span><br><span class="line"><span class="keyword">while</span>(s1[i]==s2[j]&amp;&amp;j&lt;s2.length())&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==s2.length())&#123;</span><br><span class="line">i=i-j; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">i=i-j+<span class="number">1</span>;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==s1.length())<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="字符串匹配" scheme="https://yys123456.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>华为开启usb调试问题</title>
    <link href="https://yys123456.github.io/2019/07/29/%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%90%AFusb%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>https://yys123456.github.io/2019/07/29/华为开启usb调试问题/</id>
    <published>2019-07-29T08:16:09.000Z</published>
    <updated>2019-07-29T08:19:14.605Z</updated>
    
    <content type="html"><![CDATA[<p>华为手机开启usb调试问题</p><ol><li>开发者模式开启usb调试；</li><li>等待出现rsa序列；</li><li>检查adb devices中是否有设备；</li><li>开始实机调试。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;华为手机开启usb调试问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发者模式开启usb调试；&lt;/li&gt;
&lt;li&gt;等待出现rsa序列；&lt;/li&gt;
&lt;li&gt;检查adb devices中是否有设备；&lt;/li&gt;
&lt;li&gt;开始实机调试。&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="安卓开发" scheme="https://yys123456.github.io/categories/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="usb调试问题" scheme="https://yys123456.github.io/tags/usb%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>静态链表</title>
    <link href="https://yys123456.github.io/2019/07/25/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/"/>
    <id>https://yys123456.github.io/2019/07/25/静态链表/</id>
    <published>2019-07-25T05:14:27.000Z</published>
    <updated>2019-07-29T08:20:17.743Z</updated>
    
    <content type="html"><![CDATA[<p>由于C++语言中具有指针这一种数据类型，指针用来指示结点的存储首地址，所以可以使用前一个结点中的next域中所存放的地址来指示下一个结点的位置，从而可以方便地实现单链表的结构，但是对于不设指针的高级语言中，就无法使用指针来实现单链表了。虽然没有指针这种数据类型，并不代表无法实现链表数据结构，链表实际上就是一个一个结点通过地址的关系链接起来，主要是为了满足插入与删除和动态分配结点的方便性的数据结构。所以可以使用结构体数组来实现静态链表。为了更具有一般性，<strong>以下使用Java语言来实现静态链表</strong>（以下称<strong>SL</strong>）。</p><h3 id="1-结点的结构"><a href="#1-结点的结构" class="headerlink" title="1. 结点的结构"></a>1. 结点的结构</h3><p>一个结点中含有自己本身的数据和下一个结点的位置信息（即数组下标）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticList</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">char</span> data;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.  具体实现"></a>2.  具体实现</h3><p>对比C++中单链表的实现，SL需要注意</p><ol><li>指针单链表的建立过程中需要动态分配结点，使用系统函数malloc实现，而SL使用数组实现无法使用malloc；</li><li>指针单链表对结点的删除需要使用系统的free函数，而对于SL，没用相关的函数；</li></ol><h4 id="1-建立"><a href="#1-建立" class="headerlink" title="1. 建立"></a>1. 建立</h4><p>由于链表的建立都是需要通过动态分配结点并连接，所以在建立SL之前需要初始化可分配的结点资源。在使用数值来进行静态链表的建立时，需要从可分配结点资源中获取一个结点，然后将其作为头结点或存储数据的结点。简单来说，可分配结点资源就是一个静态链表，每次从资源中获取一个结点就是从其中屏蔽（删除）一个结点，然后让此结点在我所建立的链表中可见。</p><p>初始化资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>&#123;<span class="comment">//初始化资源，构造方法</span></span><br><span class="line">        a=<span class="keyword">new</span> StaticList[LEN];<span class="comment">//总资源数LEN-1个，0号不要</span></span><br><span class="line">        len=<span class="number">0</span>;<span class="comment">//设置链表初始长度为0</span></span><br><span class="line">        a[<span class="number">0</span>]=<span class="keyword">new</span> StaticList();</span><br><span class="line">        a[<span class="number">0</span>].next=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;LEN;i++) &#123;</span><br><span class="line">            a[i]=<span class="keyword">new</span> StaticList();</span><br><span class="line">            <span class="keyword">if</span> (i == LEN - <span class="number">1</span>) &#123;</span><br><span class="line">                a[i].next = <span class="number">0</span>;<span class="comment">//最后一个可分配结点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[i].next = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分配结点方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">malloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=a[<span class="number">0</span>].next;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>) &#123;</span><br><span class="line">            a[<span class="number">0</span>].next = a[i].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>尾插法创建带头结点的SL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(<span class="keyword">char</span> ...s)</span></span>&#123;<span class="comment">//尾插法</span></span><br><span class="line">        head=malloc();<span class="comment">//0表示失败</span></span><br><span class="line">        <span class="keyword">int</span> r=head;<span class="comment">//r是尾指针，标记当前链表的最后一个结点</span></span><br><span class="line">        a[head].next=<span class="number">0</span>;<span class="comment">//0对应指针单链表中的NULL</span></span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> q=malloc();</span><br><span class="line">                a[q].data=s[i];</span><br><span class="line">                a[q].next=a[r].next;</span><br><span class="line">                a[r].next=q;</span><br><span class="line">                r=q;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"空间不够"</span>);<span class="comment">//实际上s的最长长度为LEN-2，s为实际数据个数</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-遍历"><a href="#2-遍历" class="headerlink" title="2. 遍历"></a>2. 遍历</h4><p>使用遍历来测试SL是否建立成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">()</span></span>&#123;<span class="comment">//遍历</span></span><br><span class="line">       <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">       <span class="keyword">while</span>(h!=<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(h+<span class="string">" "</span>+a[h].data+<span class="string">" "</span>+a[h].next);</span><br><span class="line">           h=a[h].next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3-元素定位"><a href="#3-元素定位" class="headerlink" title="3. 元素定位"></a>3. 元素定位</h4><h5 id="1-特定位置元素定位"><a href="#1-特定位置元素定位" class="headerlink" title="1. 特定位置元素定位"></a>1. 特定位置元素定位</h5><p>类似于指针单链表，使用一个计数器j，并满足查找过程中链表没有走到尽头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StaticList <span class="title">locateElem</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//按照个数来定位</span></span><br><span class="line">       <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">       <span class="keyword">for</span>(;j&lt;i&amp;&amp;h!=<span class="number">0</span>;j++,h=a[h].next);</span><br><span class="line">       <span class="keyword">if</span>(j&gt;i||h==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">return</span> a[h];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="2-特定值的元素定位"><a href="#2-特定值的元素定位" class="headerlink" title="2. 特定值的元素定位"></a>2. 特定值的元素定位</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StaticList <span class="title">locateElem</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">       <span class="keyword">while</span>(h!=<span class="number">0</span>&amp;&amp;a[h].data!=c)h=a[h].next;</span><br><span class="line">       <span class="keyword">if</span>(h==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">return</span> a[h];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-插入"><a href="#4-插入" class="headerlink" title="4. 插入"></a>4. 插入</h4><p>类似于指针单链表，插入操作需要先走到需要插入位置的前一个位置，如果在链表中存在这个位置，那么就在它后面执行插入操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> h=head;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(j&lt;i-<span class="number">1</span>&amp;&amp;h!=<span class="number">0</span>)&#123;</span><br><span class="line">         j++;</span><br><span class="line">         h=a[h].next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(j&gt;i-<span class="number">1</span>||h==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//插入位置不合法</span></span><br><span class="line">     <span class="keyword">int</span> p=malloc();</span><br><span class="line">     <span class="keyword">if</span>(p==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无剩余空间</span></span><br><span class="line">     a[p].data=c;</span><br><span class="line">     a[p].next=a[h].next;</span><br><span class="line">     a[h].next=p;</span><br><span class="line">     len++;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//正常插入</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="5-删除"><a href="#5-删除" class="headerlink" title="5. 删除"></a>5. 删除</h4><p>类似于指针单链表，删除操作需要先走到需要插入位置的前一个位置，如果在链表中存在这个位置，并且下一个位置有结点，就执行删除操作，但由于SL的所有结点都是从一个资源数组得来的，所以对于一个结点的释放，就是将这个结点还给资源数组，而这个操作需要自己实现free方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//将还回的结点i（逻辑上）插入到a[0]后面</span></span><br><span class="line">       a[i].next=a[<span class="number">0</span>].next;</span><br><span class="line">       a[<span class="number">0</span>].next=i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="1-按位序删除"><a href="#1-按位序删除" class="headerlink" title="1. 按位序删除"></a>1. 按位序删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//删除第i个结点</span></span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h=head;</span><br><span class="line">        <span class="keyword">while</span>(a[h].next!=<span class="number">0</span>&amp;&amp;j&lt;i-<span class="number">1</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            h=a[h].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span>||a[h].next==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p=a[h].next;</span><br><span class="line">        a[h].next=a[p].next;</span><br><span class="line">        free(p);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-按值删除（删除特定值的结点）"><a href="#2-按值删除（删除特定值的结点）" class="headerlink" title="2. 按值删除（删除特定值的结点）"></a>2. 按值删除（删除特定值的结点）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h=head;</span><br><span class="line">        <span class="keyword">while</span>(a[h].next!=<span class="number">0</span>&amp;&amp;a[a[h].next].data!=c)h=a[h].next;</span><br><span class="line">        <span class="keyword">if</span>(a[h].next==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不存在值为c的结点</span></span><br><span class="line">        <span class="keyword">int</span> p=a[h].next;</span><br><span class="line">        a[h].next=a[p].next;</span><br><span class="line">        free(p);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-基于静态链表求集合A与B的对称差"><a href="#3-基于静态链表求集合A与B的对称差" class="headerlink" title="3. 基于静态链表求集合A与B的对称差"></a>3. 基于静态链表求集合A与B的对称差</h3><p>由于上面已经将插入与删除的方法定义完备，所以可以直接基于对称差的描述来实现算法。对称差公式如下</p><script type="math/tex; mode=display">A\oplus{B}=(A\cup{B})-(A\cap{B})=(A-B)\cup(B-A)</script><p>所以求A和B的对称差就可以对B进行遍历，然后检查A，将A中$A\cap{B}$部分删除，然后将A中没有的数据包装成结点，插入A的末尾。最后返回处理后的A对应的引用变量。</p><p>复杂度极高的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Main <span class="title">process</span><span class="params">(Main m1,Main m2)</span></span>&#123;<span class="comment">//求对称差 </span></span><br><span class="line">        <span class="comment">//从m2中取出元素，然后再m1中遍历，若相同就删除，若找不到就在尾部插入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m2.len;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">if</span>(m1.locateElem(m2.locateElem(i).data)!=<span class="keyword">null</span>)&#123;<span class="comment">//遍历</span></span><br><span class="line">                m1.delete(m2.locateElem(i).data);<span class="comment">//遍历</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                m1.insert(m1.len+<span class="number">1</span>,m2.locateElem(i).data);<span class="comment">//遍历</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度较低的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Main <span class="title">process1</span><span class="params">(Main m1,Main m2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h1,h2;</span><br><span class="line">        <span class="keyword">int</span> pre;<span class="comment">//跟进指针，无论m1中是否有相应的元素 pre始终指向h1的前一个结点</span></span><br><span class="line">        h2=m2.a[m2.head].next;<span class="comment">//指向m2第一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(h2!=<span class="number">0</span>)&#123;</span><br><span class="line">            pre=m1.head;<span class="comment">//指向m1的头结点</span></span><br><span class="line">            h1=m1.a[pre].next;</span><br><span class="line">            <span class="keyword">while</span>(h1!=<span class="number">0</span>&amp;&amp;m1.a[h1].data!=m2.a[h2].data)&#123;</span><br><span class="line">                pre=h1;</span><br><span class="line">                h1=m1.a[h1].next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h1==<span class="number">0</span>)&#123;<span class="comment">//没有相等的结点</span></span><br><span class="line">                <span class="keyword">int</span> p=m1.malloc();</span><br><span class="line">                m1.a[p].data=m2.a[h2].data;</span><br><span class="line">                m1.a[p].next=m1.a[pre].next;</span><br><span class="line">                m1.a[pre].next=p;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                m1.a[pre].next=m1.a[h1].next;</span><br><span class="line">                m1.free(h1);</span><br><span class="line">            &#125;</span><br><span class="line">            h2=m2.a[h2].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>由于每次取出m2中的一个元素后都要对m1遍历一遍，所以时间复杂度为  $ O(LEN_{m1}\times{LEN_{m2}})$。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>静态单链表和动态单链表非常相似，动态单链表使用结构体并借助系统函数malloc和free来实现系统内存资源的分配链表的建立和结点的插入和删除。而静态单链建立时所分配的资源是提前建立的结构数组的资源，所以需要手工实现malloc和free函数。其他的方面区别不是很大。</p><p>对于静态链表SL，需要了解</p><ol><li>SL的建立（需要直到建立SL之前需要做的事情（初始化资源、实现malloc方法（隐蔽）））；</li><li>SL中结点的删除（free方法的实现（归还））；</li><li>SL的插入操作；</li><li>SL中元素的定位；</li></ol><h3 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5. 测试程序"></a>5. 测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticList</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">char</span> data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEN=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> StaticList[] a;<span class="comment">//备用链表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">static</span> java.util.Scanner scn=<span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>&#123;<span class="comment">//初始化资源</span></span><br><span class="line">        a=<span class="keyword">new</span> StaticList[LEN];<span class="comment">//带头结点的静态链表</span></span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//System.out.println(a[0]==null?"NULL":"yes");</span></span><br><span class="line">        a[<span class="number">0</span>]=<span class="keyword">new</span> StaticList();</span><br><span class="line">        a[<span class="number">0</span>].next=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;LEN;i++) &#123;</span><br><span class="line">            a[i]=<span class="keyword">new</span> StaticList();</span><br><span class="line">            <span class="keyword">if</span> (i == LEN - <span class="number">1</span>) &#123;</span><br><span class="line">                a[i].next = <span class="number">0</span>;<span class="comment">//最后一个可分配结点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[i].next = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">malloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=a[<span class="number">0</span>].next;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>) &#123;</span><br><span class="line">            a[<span class="number">0</span>].next = a[i].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(<span class="keyword">char</span> ...s)</span></span>&#123;<span class="comment">//尾插法</span></span><br><span class="line">        head=malloc();<span class="comment">//0表示失败</span></span><br><span class="line">        <span class="keyword">int</span> r=head;</span><br><span class="line">        a[head].next=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> q=malloc();</span><br><span class="line">                a[q].data=s[i];</span><br><span class="line">                a[q].next=a[r].next;</span><br><span class="line">                a[r].next=q;</span><br><span class="line">                r=q;<span class="comment">//</span></span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"空间不够"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">StaticList <span class="title">locateElem</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//按照个数来定位</span></span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;i&amp;&amp;h!=<span class="number">0</span>;j++,h=a[h].next);</span><br><span class="line">        <span class="keyword">if</span>(j&gt;i||h==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a[h];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">()</span></span>&#123;<span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">        <span class="keyword">while</span>(h!=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(h+<span class="string">" "</span>+a[h].data+<span class="string">" "</span>+a[h].next);</span><br><span class="line">            h=a[h].next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">StaticList <span class="title">locateElem</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h=a[head].next;</span><br><span class="line">        <span class="keyword">while</span>(h!=<span class="number">0</span>&amp;&amp;a[h].data!=c)h=a[h].next;</span><br><span class="line">        <span class="keyword">if</span>(h==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a[h];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h=head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&lt;i-<span class="number">1</span>&amp;&amp;h!=<span class="number">0</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            h=a[h].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span>||h==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> p=malloc();</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        a[p].data=c;</span><br><span class="line">        a[p].next=a[h].next;</span><br><span class="line">        a[h].next=p;</span><br><span class="line">        len++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        a[i].next=a[<span class="number">0</span>].next;</span><br><span class="line">        a[<span class="number">0</span>].next=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h=head;</span><br><span class="line">        <span class="keyword">while</span>(a[h].next!=<span class="number">0</span>&amp;&amp;a[a[h].next].data!=c)h=a[h].next;</span><br><span class="line">        <span class="keyword">if</span>(a[a[h].next].next==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p=a[h].next;</span><br><span class="line">        a[h].next=a[p].next;</span><br><span class="line">        free(p);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h=head;</span><br><span class="line">        <span class="keyword">while</span>(a[h].next!=<span class="number">0</span>&amp;&amp;j&lt;i-<span class="number">1</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            h=a[h].next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span>||a[h].next==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p=a[h].next;</span><br><span class="line">        a[h].next=a[p].next;</span><br><span class="line">        free(p);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Main <span class="title">process</span><span class="params">(Main m1,Main m2)</span></span>&#123;<span class="comment">//求对称差</span></span><br><span class="line">        <span class="comment">//从m2中取出元素，然后再m1中遍历，若相同就删除，若找不到就在尾部插入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m2.len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m1.locateElem(m2.locateElem(i).data)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                m1.delete(m2.locateElem(i).data);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//System.out.println(m2.locateElem(i).data);</span></span><br><span class="line">                m1.insert(m1.len+<span class="number">1</span>,m2.locateElem(i).data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Main <span class="title">process1</span><span class="params">(Main m1,Main m2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h1,h2;</span><br><span class="line">        <span class="keyword">int</span> pre;</span><br><span class="line">        h2=m2.a[m2.head].next;<span class="comment">//指向m2第一个结点</span></span><br><span class="line">        <span class="comment">//System.out.println(h2);</span></span><br><span class="line">        <span class="keyword">while</span>(h2!=<span class="number">0</span>)&#123;</span><br><span class="line">            pre=m1.head;<span class="comment">//指向m1的头结点</span></span><br><span class="line">            h1=m1.a[pre].next;</span><br><span class="line">            <span class="keyword">while</span>(h1!=<span class="number">0</span>&amp;&amp;m1.a[h1].data!=m2.a[h2].data)&#123;</span><br><span class="line">                pre=h1;</span><br><span class="line">                h1=m1.a[h1].next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h1==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入"</span>);</span><br><span class="line">                <span class="keyword">int</span> p=m1.malloc();</span><br><span class="line">                m1.a[p].data=m2.a[h2].data;</span><br><span class="line">                m1.a[p].next=m1.a[pre].next;</span><br><span class="line">                m1.a[pre].next=p;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(m1.a[h1].data);</span><br><span class="line">                m1.a[pre].next=m1.a[h1].next;</span><br><span class="line">                m1.free(h1);</span><br><span class="line">            &#125;</span><br><span class="line">            h2=m2.a[h2].next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        Main m=<span class="keyword">new</span> Main();</span><br><span class="line">        System.out.println(<span class="string">"生成静态链表m1："</span>);</span><br><span class="line">        m.createList(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>);</span><br><span class="line">        m.showList();</span><br><span class="line">        System.out.println(<span class="string">"输入定位元素值："</span>);</span><br><span class="line">        <span class="keyword">char</span> c=scn.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(m.locateElem(c)==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"null"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(m.locateElem(c).data+<span class="string">" "</span>+m.locateElem(c).next);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"输入插入参数："</span>);</span><br><span class="line">        m.insert(scn.nextInt(),scn.next().charAt(<span class="number">0</span>));</span><br><span class="line">        m.showList();</span><br><span class="line">        System.out.println(<span class="string">"输入删除参数："</span>);</span><br><span class="line">        m.delete(scn.nextInt());</span><br><span class="line">        m.showList();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"生成静态链表m2："</span>);</span><br><span class="line">        Main m2=<span class="keyword">new</span> Main();</span><br><span class="line">        m2.createList(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>);</span><br><span class="line">        m2.showList();</span><br><span class="line">       <span class="comment">//System.out.println(m2.locateElem(m2.len).data);</span></span><br><span class="line">        System.out.println(<span class="string">"\n两个静态链表求对称差："</span>);</span><br><span class="line">        process1(m,m2).showList();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//StaticList s=m.locateElem('3');</span></span><br><span class="line">       <span class="comment">//StaticList s=m.locateElem(3);</span></span><br><span class="line">       <span class="comment">//System.out.println(s.data+" "+s.next);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于C++语言中具有指针这一种数据类型，指针用来指示结点的存储首地址，所以可以使用前一个结点中的next域中所存放的地址来指示下一个结点的位置，从而可以方便地实现单链表的结构，但是对于不设指针的高级语言中，就无法使用指针来实现单链表了。虽然没有指针这种数据类型，并不代表无法
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="静态链表" scheme="https://yys123456.github.io/tags/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>1008</title>
    <link href="https://yys123456.github.io/2019/07/22/pat-1008/"/>
    <id>https://yys123456.github.io/2019/07/22/pat-1008/</id>
    <published>2019-07-22T12:30:42.000Z</published>
    <updated>2019-08-10T05:23:06.241Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//三步反转法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>* s,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(n&gt;m)&#123;</span><br><span class="line">swap(s[m],s[n]);</span><br><span class="line">n--;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>*,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;len&gt;&gt;k;</span><br><span class="line">    k%=len;</span><br><span class="line"><span class="keyword">int</span> *s=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">reverse(s,len-k,len<span class="number">-1</span>);</span><br><span class="line">reverse(s,<span class="number">0</span>,len-k<span class="number">-1</span>);</span><br><span class="line">reverse(s,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;(i==len<span class="number">-1</span>?<span class="string">""</span>:<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1008" scheme="https://yys123456.github.io/tags/1008/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="https://yys123456.github.io/2019/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E9%93%BE%E8%A1%A8/"/>
    <id>https://yys123456.github.io/2019/07/19/数据结构———线性链表/</id>
    <published>2019-07-19T08:09:00.000Z</published>
    <updated>2019-07-29T08:21:04.138Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>线性表的表示方式有顺序表和链表两种，其中顺序表是一种随机存取结构，可以根据其逻辑顺序和存储顺序一致的特性从而可以根据其中某一个元素的地址推算出其他所有元素的地址，有公式如下，其中d是每一个元素所占的内存大小</p><script type="math/tex; mode=display">LOC_{a_j}=LOC_{a_i}+(j-i){\cdot}d</script><p>所以访问顺序表中i号元素的时间复杂度为</p><script type="math/tex; mode=display">O(1)</script><p>但是线性链表有所不同，线性链表并不是一种物理顺序和逻辑顺序相同的一种结构，线性链表中的元素在逻辑上是连续的，而物理上不一定是连续的，所以并不可以通过链表中某一个元素的位置推算出其他元素的位置。链表分为许多种类：单链表、循环链表、双向链表、静态链表。</p><script type="math/tex; mode=display">循环链表\left\{\begin{aligned}循环的单链表\\循环的双向链表\\循环的静态链表\end{aligned}\right.</script><h3 id="1-单链表的结构"><a href="#1-单链表的结构" class="headerlink" title="1. 单链表的结构"></a>1. 单链表的结构</h3><p>单链表就是简单的结点与结点通过指针相连，用来存储线性表中数据的结构。使用C++语言描述如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;<span class="comment">//方便起见，使用char代替ElemType类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span><span class="comment">//保存此结点下一个结点的地址</span></span><br><span class="line">&#125;LNode,*LList;<span class="comment">//此处LList是LNode型的指针类型即类似于#define LNode* LList</span></span><br></pre></td></tr></table></figure><h3 id="2-单链表的建立"><a href="#2-单链表的建立" class="headerlink" title="2. 单链表的建立"></a>2. 单链表的建立</h3><p>单链表的建立需要以下一些原料</p><ol><li>链表长度n；</li><li>链表中的数据；</li><li>建立链表的种类；</li><li>确定建立单链表的方法（头插/尾插）。</li></ol><p>其中第三点，用来确定所建立的链表是否带头结点。并且注意不论单链表是否带头结点，它都有头指针。对于单链表的建立，设计方法LList buildList0(string , int)使用头插法建立单链表，方法LList buildList1(string , int)使用尾插法建立单链表。注意方法的返回值为LList型（即LNode型指针）的变量，这个返回值就是头指针。</p><p>头插法（注意生成顺序和遍历顺序的不一致性）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc所申请的空间系统并不会自动释放 所以我可以用一个函数去返回指针</span></span><br><span class="line"><span class="function">LList <span class="title">buildList0</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//头插法 </span></span><br><span class="line">LList L=<span class="literal">NULL</span>;<span class="comment">//头指针 </span></span><br><span class="line">LList p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">"head"</span>)&#123;<span class="comment">//带头结点</span></span><br><span class="line">L = (LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//不带头结点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">p-&gt;next=L;</span><br><span class="line">L=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;<span class="comment">//返回头指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LList <span class="title">buildList1</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//尾插法 </span></span><br><span class="line">LList L=<span class="literal">NULL</span>;</span><br><span class="line">LList p=<span class="literal">NULL</span>;</span><br><span class="line">LList q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">"head"</span>)&#123;<span class="comment">//带头结点</span></span><br><span class="line">L=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q=L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line">q=p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//不带头结点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)q=L=p;<span class="comment">//第一个结点特殊对待 使得后面的操作具有规律性</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line">q=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单链表建立算法</p><p>头插法（方便不需要额外设置跟进指针，但是得到的序列是颠倒的）</p><ol><li>有头结点算法<ol><li>为头指针分配空间，并让头指针的next域为NULL；</li><li>生成结点，并为data域赋值，在让其next域去指向头指针的next位置；</li><li>再让头指针的next域去指向此结点；</li><li>判断生成结点个数是否达到上限，达到则算法结束，否则回到2。</li></ol></li><li>无头结点算法<ol><li>令头指针指向NULL</li><li>生成结点，并为data域赋值，在让其next域去指向头指针的位置；</li><li>令头指针去指向此结点；</li><li>判断生成结点个数是否达到上限，达到则算法结束，否则回到2。</li></ol></li></ol><p>尾插法（较为不方便，需要设置跟进指针q，q指针起到对结点的操纵作用）</p><ol><li>有头结点算法<ol><li>为头指针L分配空间，并让头指针的next域为NULL；</li><li>设置跟进指针q，并令其指向L；</li><li>生成结点p，并为data域赋值，在让其next域为NULL；</li><li>令q的next域指向p；</li><li>令q指向p；</li><li>判断生成结点个数是否达到上限，达到则算法结束，否则回到3。</li></ol></li><li>无头结点算法（较复杂，需要对第一个分配的结点特殊对待）<ol><li>令头指针L为NULL；</li><li>生成结点p，并为data域赋值，在让其next域为NULL；</li><li>判断p是否是第一个分配的结点，若不是则进入5，否则4；</li><li>令L去指向p并令q指向L，跳到7。</li><li>令q的next指向p；</li><li>令q指向p；</li><li>判断生成结点个数是否达到上限，达到则算法结束，否则回到2。</li></ol></li></ol><p>时间复杂度分析</p><p>单链表建立算法的原操作是为指针分配空间，所以可以得到复杂度与链表长度n有关，所以可得</p><script type="math/tex; mode=display">O(n)</script><h3 id="3-对单链表中元素的访问"><a href="#3-对单链表中元素的访问" class="headerlink" title="3. 对单链表中元素的访问"></a>3. 对单链表中元素的访问</h3><p>对单链表中元素的访问分为两种</p><h4 id="1-访问第i个元素"><a href="#1-访问第i个元素" class="headerlink" title="1. 访问第i个元素"></a>1. 访问第i个元素</h4><p>设计方法char getElem(int ,LList, string)来获得链表中i号位置的结点中存储的元素ai。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getElem</span><span class="params">(<span class="keyword">int</span> i,LList L,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">L=L-&gt;next;<span class="comment">//消除带头和不带头结点的单链表之间的差异 统一按照无头处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int j=1;j&lt;i&amp;&amp;L;j++)&#123;</span></span><br><span class="line"><span class="comment">    L=L-&gt;next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//思考此处!L条件是否可以换成j&lt;i？不可以 !L不等价于j&lt;i</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> L-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码分析</p><p>访问长度为n的单链表中第i个元素就是要找到单链表中第i个结点的位置，其中给出的位置信息i可能是不合法的，当i<1或i>n时为不合法位置，对于这样的i值，无法找到对应的结点。</1或i></p><p>i&lt;1时表示要寻找0号及以前的结点，显然不符合要求。不会进入循环（通过j不满足小于i判定）。</p><p>i&gt;n时表示寻找的结点在最后一个结点之后，进入循环之后，会导致L最终为空从而跳出循环。</p><p>1&lt;=i&lt;=n时会找到相应的结点，从而正常通过i==j跳出循环。</p><p>所以在跳出循环之后，我要对这几种情况分别处理，对于不正常的循环跳出，返回一个不可能的值0，否则返回当前寻找到的结点data。</p><p>时间复杂度分析</p><p>原操作是L指针的后移</p><p>i&lt;1时</p><p>后移0次</p><p>1&lt;=i&lt;=n时</p><p>当i=1时，后移次数为0，i=2时后移一次，所以i=n时，后移n-1次；</p><p>i&gt;n时</p><p>移动范围是2~n+1，所以后移n次。</p><p>所以可得时间复杂度为</p><script type="math/tex; mode=display">O(n)</script><h4 id="2-访问满足一定条件的元素"><a href="#2-访问满足一定条件的元素" class="headerlink" title="2. 访问满足一定条件的元素"></a>2. 访问满足一定条件的元素</h4><p>设计方法char getElem(LList ,string ,bool (*cmp)(char))。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getElem</span><span class="params">(LList L,<span class="built_in">string</span> kind,<span class="keyword">bool</span> (*cmp)(<span class="keyword">char</span>))</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(L-&gt;data))&#123;</span><br><span class="line"><span class="keyword">return</span> L-&gt;data;<span class="comment">//返回第一个满足cmp条件的data</span></span><br><span class="line">&#125;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于无法知道满足条件的结点在单链表中的位置，所以使用最坏情况下的时间复杂度</p><script type="math/tex; mode=display">O(n)</script><h4 id="3-遍历"><a href="#3-遍历" class="headerlink" title="3. 遍历"></a>3. 遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(LList L,<span class="built_in">string</span> kind)</span></span>&#123;<span class="comment">//输出链表</span></span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"head -&gt; "</span>;</span><br><span class="line">      L=L-&gt;next;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(L)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L-&gt;data;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" -&gt; "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NULL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-插入运算"><a href="#4-插入运算" class="headerlink" title="4. 插入运算"></a>4. 插入运算</h3><p>单链表的插入运算和单链表的头插法建立类似。插入运算需要的原料有</p><ol><li>插入位置i</li><li>插入的结点（或链表）</li></ol><p>插入运算需要注意插入位置的范围，插入的位置i需要满足1&lt;=i&lt;=n+1，并且注意插入运算只要求当前结点不是空结点（线性表的插入运算类似，只要当前位置有元素，就可以在它后面插入元素），那么就可以在它后面进行插入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,LList L,<span class="keyword">char</span> a,<span class="built_in">string</span> kind)</span></span>&#123;<span class="comment">//i插入位置、L链表、a插入结点的data</span></span><br><span class="line">LList p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"插入位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//不带头结点的链表插入位置为1时需要单独讨论</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L;</span><br><span class="line">L=p;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"插入位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>插入结点的原操作就是两步的赋值运算，所以时间复杂度为</p><script type="math/tex; mode=display">O(1)</script><h3 id="5-删除运算"><a href="#5-删除运算" class="headerlink" title="5. 删除运算"></a>5. 删除运算</h3><p>单链表的删除运算需要的参数是删除的位置i，要求删除位置i满足1&lt;=i&lt;=n，因为删除i号结点必须要求这个结点存在，所以删除运算的首要目标是找到i号结点的前驱结点。</p><p>注意此处存在插入运算和删除运算的区别</p><p>在插入运算中，最后一个结点是可以作为前驱（当i=n+1时）的，因为可以在最后一个结点后面插入一个结点。</p><p>而在删除运算中最后一个结点后面没有任何可以删除的结点，所以最后一个结点不可以作为前驱。</p><p>以上两条造成了两者在具体操作时的差别，对于插入操作，从前向后走，只要这个走到的这个结点不为空，那么它后面就可能成为插入的位置，而对于删除操作，从前往后走，走到的这个结点不为空的条件还不够，还需要它后面的那个结点（被删除的对象）不为空才可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(LList&amp; L,<span class="keyword">int</span> i,<span class="built_in">string</span> kind)</span></span>&#123;<span class="comment">//使用了指针的引用</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LList q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">LList L1=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;next||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">L=L1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=<span class="number">1</span>;<span class="comment">//注意此处和带头结点的区别</span></span><br><span class="line"><span class="keyword">if</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">q=L;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;next||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>删除结点的原操作就是三条语句，所以时间复杂度为</p><script type="math/tex; mode=display">O(1)</script><h3 id="6-有序单链表的合并"><a href="#6-有序单链表的合并" class="headerlink" title="6. 有序单链表的合并"></a>6. 有序单链表的合并</h3><p>在顺序表中也有类似的算法，用于归并两个非递减序列，但是区别在于归并两个顺序表时使用的方法是另外申请一片空间，并同时对两个序列进行比较处理，然后将相应元素放入新序列中，而有序单链表的合并不需要另外申请空间（空间复杂度较小），而是将两个链表的箭头进行拆散重连，从而使最终链表有序。</p><p>算法描述（有头结点）</p><ol><li>L1，L2进入函数；</li><li>设定跟进LNode型指针c；</li><li>设定最终链表头指针L，并让c=L=L1；</li><li>对两个有序链表L1，L2分别从<strong>第一个存储元素</strong>的结点p和q开始向后走；</li><li>比较两个结点中的元素的值，找到较小或较大的那一方a；</li><li>让跟进指针c的next置为a，并实时更新c为a，在让a向后走一步；</li><li>判断p或者q是否为空，为空则结束算法，否则进入4；</li><li>最后，将p和q中非空的那一方赋值给c-&gt;next，free(L2)。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LList <span class="title">Merge</span><span class="params">(LList L1,LList L2,<span class="built_in">string</span> kind,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span> a,<span class="keyword">char</span> b))</span></span>&#123;</span><br><span class="line">LList L=<span class="literal">NULL</span>;</span><br><span class="line">LList c;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">c=L=L1;</span><br><span class="line">LList p=L1-&gt;next;</span><br><span class="line">LList q=L2-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;q)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(p-&gt;data,q-&gt;data))&#123;</span><br><span class="line">c-&gt;next=p;</span><br><span class="line">c=p;</span><br><span class="line">p=p-&gt;next; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c-&gt;next=q;</span><br><span class="line">c=q;</span><br><span class="line">q=q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c-&gt;next=q?q:p;</span><br><span class="line"><span class="built_in">free</span>(L2);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c=L=(cmp(L1-&gt;data,L2-&gt;data)?L1:L2);</span><br><span class="line"><span class="keyword">if</span>(cmp(L1-&gt;data,L2-&gt;data))&#123;</span><br><span class="line">L1=L1-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">L2=L2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L1&amp;&amp;L2)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(L1-&gt;data,L2-&gt;data))&#123;</span><br><span class="line">c-&gt;next=L1;</span><br><span class="line">c=L1;</span><br><span class="line">L1=L1-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c-&gt;next=L2;</span><br><span class="line">c=L2;</span><br><span class="line">L2=L2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c-&gt;next=L1?L1:L2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>原操作是<strong>对跟进指针c的移动</strong>，所以可得到时间按复杂度为两者长度之和</p><script type="math/tex; mode=display">O(m+n)</script><h3 id="7-单链表的销毁"><a href="#7-单链表的销毁" class="headerlink" title="7. 单链表的销毁"></a>7. 单链表的销毁</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(LList L,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line">LList q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(L);<span class="comment">//注意带头结点的链表的头结点的释放</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line">q=L;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><p>对于单链表需要了解</p><ol><li>单链表的结构；</li><li>单链表的基本操作（建立，插入，删除，销毁）；</li><li>单链表合并算法；</li><li>访问单链表中某一元素；</li><li>单链表相比顺序表的优点（插入和删除）和缺点（访问元素）。</li></ol><h3 id="9-测试程序"><a href="#9-测试程序" class="headerlink" title="9. 测试程序"></a>9. 测试程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LList;</span><br><span class="line"><span class="function">LList <span class="title">buildList1</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line">LList L=<span class="literal">NULL</span>;</span><br><span class="line">LList p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">L=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LList));</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a[i];</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a[i];</span><br><span class="line">p-&gt;next=L;</span><br><span class="line">L=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getElem</span><span class="params">(LList L,<span class="built_in">string</span> kind,<span class="keyword">bool</span> (*cmp)(<span class="keyword">char</span>))</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(L-&gt;data))&#123;</span><br><span class="line"><span class="keyword">return</span> L-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getElem</span><span class="params">(<span class="keyword">int</span> i,LList L,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> L-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(LList L,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line">LList q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(L);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line">q=L;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(LList L,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"head -&gt; "</span>;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;L-&gt;data;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" -&gt; "</span>;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NULL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,LList L,<span class="keyword">char</span> a,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line">LList p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"插入位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L;</span><br><span class="line">L=p;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(L&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"插入位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=(LList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(LList&amp; L,<span class="keyword">int</span> i,<span class="built_in">string</span> kind)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LList q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line">LList L1=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;next||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">L=L1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">q=L;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!L-&gt;next||j&gt;i<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q=L-&gt;next;</span><br><span class="line">L-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">LList <span class="title">Merge</span><span class="params">(LList L1,LList L2,<span class="built_in">string</span> kind,<span class="keyword">bool</span>(*cmp)(<span class="keyword">char</span> a,<span class="keyword">char</span> b))</span></span>&#123;</span><br><span class="line">LList L=<span class="literal">NULL</span>;</span><br><span class="line">LList c;</span><br><span class="line"><span class="keyword">if</span>(kind==<span class="string">"head"</span>)&#123;</span><br><span class="line"></span><br><span class="line">c=L=L1;</span><br><span class="line">LList p=L1-&gt;next;</span><br><span class="line">LList q=L2-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;q)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(p-&gt;data,q-&gt;data))&#123;</span><br><span class="line">c-&gt;next=p;</span><br><span class="line">c=p;</span><br><span class="line">p=p-&gt;next; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c-&gt;next=q;</span><br><span class="line">c=q;</span><br><span class="line">q=q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c-&gt;next=q?q:p;</span><br><span class="line"><span class="built_in">free</span>(L2);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c=L=(cmp(L1-&gt;data,L2-&gt;data)?L1:L2);</span><br><span class="line"><span class="keyword">if</span>(cmp(L1-&gt;data,L2-&gt;data))&#123;</span><br><span class="line">L1=L1-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">L2=L2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L1&amp;&amp;L2)&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(L1-&gt;data,L2-&gt;data))&#123;</span><br><span class="line">c-&gt;next=L1;</span><br><span class="line">c=L1;</span><br><span class="line">L1=L1-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c-&gt;next=L2;</span><br><span class="line">c=L2;</span><br><span class="line">L2=L2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c-&gt;next=L1?L1:L2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LList L1,L2;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">L1=buildList1(m,<span class="string">"nonhead"</span>);</span><br><span class="line">L2=buildList1(n,<span class="string">"nonhead"</span>);</span><br><span class="line">LList L3=Merge(L1,L2,<span class="string">"nonhead"</span>,cmp1);<span class="comment">//递增 </span></span><br><span class="line">show(L3,<span class="string">"nonhead"</span>);</span><br><span class="line">destroy(L3,<span class="string">"nonhead"</span>);</span><br><span class="line"><span class="comment">/*LList L;</span></span><br><span class="line"><span class="comment">int n;</span></span><br><span class="line"><span class="comment">cin&gt;&gt;n;</span></span><br><span class="line"><span class="comment">L=buildList1(n,"head");</span></span><br><span class="line"><span class="comment">show(L,"head"); </span></span><br><span class="line"><span class="comment">//cout&lt;&lt;getElem(3,L,"head")&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">insert(4,L,'b',"head");</span></span><br><span class="line"><span class="comment">show(L,"head");</span></span><br><span class="line"><span class="comment">del(L,4,"head");</span></span><br><span class="line"><span class="comment">show(L,"head"); </span></span><br><span class="line"><span class="comment">destroy(L,"head");</span></span><br><span class="line"><span class="comment">L=buildList1(n,"nonhead");</span></span><br><span class="line"><span class="comment">show(L,"nonhead");</span></span><br><span class="line"><span class="comment">insert(4,L,'b',"nonhead");</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;getElem(3,L,"nonhead")&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">show(L,"nonhead"); </span></span><br><span class="line"><span class="comment">del(L,4,"nonhead");</span></span><br><span class="line"><span class="comment">show(L,"nonhead");</span></span><br><span class="line"><span class="comment">destroy(L,"nonhead"); */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;线性表的表示方式有顺序表和链表两种，其中顺序表是一种随机存取结构，可以根据其逻辑顺序和存储顺序一致的特性从而可以根据其中某一个元素的地址推算出其他所有元素的地址，有公式如下，其中d是每一个元素所占的内存大小&lt;/p&gt;
&lt;script typ
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单链表" scheme="https://yys123456.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>1026</title>
    <link href="https://yys123456.github.io/2019/07/18/PAT-1026/"/>
    <id>https://yys123456.github.io/2019/07/18/PAT-1026/</id>
    <published>2019-07-18T13:17:44.000Z</published>
    <updated>2019-08-10T05:22:48.198Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> s1=(b-a)/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> s2=<span class="keyword">double</span>(b-a)/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> c=s2-s1;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="number">0.5</span>)&#123;</span><br><span class="line">s1+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">h=s1/<span class="number">3600</span>;</span><br><span class="line"><span class="keyword">if</span>(s1&gt;=<span class="number">3600</span>)&#123;</span><br><span class="line">s1-=h*<span class="number">3600</span>;</span><br><span class="line">&#125;</span><br><span class="line">m=s1/<span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span>(s1&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">s1-=m*<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>,h,m,s1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1026" scheme="https://yys123456.github.io/tags/1026/"/>
    
  </entry>
  
  <entry>
    <title>顺序表</title>
    <link href="https://yys123456.github.io/2019/07/13/2019-07-10-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>https://yys123456.github.io/2019/07/13/2019-07-10-数据结构——顺序表/</id>
    <published>2019-07-13T03:36:24.000Z</published>
    <updated>2019-07-22T12:33:47.771Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>顺序表是线性表的一种，顺序表的特殊性在于顺序表用一组地址连续的存储单元依次存储线性表的数据元素，所以就导致了顺序表这种数据结构中数据元素之间的逻辑关系和物理存储位置是一致的，所以在顺序表中，已知一个数据元素的地址，可以推算出其他所有元素的地址，即顺序表是一种随机存取的结构。</p><h3 id="1-顺序表的表示"><a href="#1-顺序表的表示" class="headerlink" title="1. 顺序表的表示"></a>1. 顺序表的表示</h3><p>在数据结构教材中将顺序表这种数据结构封装成了C语言中的struct类型，而C语言中的数组结构就很类似于顺序表，顺序表结构具有顺序表起始地址elem、顺序表长度len和顺序表最大长度size这三个成员。</p><p>顺序表SqList类型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType* elem;<span class="comment">//ElemType可以选择任意基本、类或结构类型</span></span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//顺序表的所存储的元素个数</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//顺序表总大小（以sizeof(ElemType)为单位）</span></span><br><span class="line">&#125;SqList;<span class="comment">//将这个结构类型重命名为SqList</span></span><br></pre></td></tr></table></figure><h3 id="2-顺序表的初始化"><a href="#2-顺序表的初始化" class="headerlink" title="2. 顺序表的初始化"></a>2. 顺序表的初始化</h3><p>由于使用SqList定义一个顺序表类型的变量，并未给其中的elem指针分配一块连续存储单元，所以需要使用C语言中的malloc函数为elem指针进行分配空间，先定义一个初始的最大空间以及一个增量空间，方便起见使用int类型来替换ElemType自定义类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCRSIZE 10</span></span><br></pre></td></tr></table></figure><p>对顺序表的初始化举例如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">INITLIST</span><span class="params">(SqList&amp;s)</span></span>&#123;<span class="comment">//使用了引用</span></span><br><span class="line">    s.elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(INITSIZE*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(!s.elem)<span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//确保程序的健壮性</span></span><br><span class="line">    s.len=<span class="number">0</span>;<span class="comment">//初始长度为0</span></span><br><span class="line">    s.size=INITSIZE;<span class="comment">//总大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList sq;</span><br><span class="line">INITLIST(sq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-顺序表的插入运算"><a href="#3-顺序表的插入运算" class="headerlink" title="3. 顺序表的插入运算"></a>3. 顺序表的插入运算</h3><p>抛开前面的顺序表类型不谈，对一个顺序表进行插入运算分为以下步骤：</p><ol><li>确定插入位置；</li><li>进行元素的移动；</li><li>插入元素。</li></ol><p>由于无法预测到输入数据的插入位置是否满足合法性，所以需要进行插入位置的合法性检查，另外插入运算需要对顺序表中的元素进行移动，比如，要求在长度为n的顺序表中的i（1&lt;=i&lt;=n+1）号位置插入一个元素，就需要先将i号位置空出来，就需要将i~n的所有元素整体向后移动位置,在对i位置赋值，使用简单的整型数组结合循环语句可以表达如下（注意下标的转换）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">&#125;</span><br><span class="line">a[i<span class="number">-1</span>]=e;<span class="comment">//e为要插入的数值</span></span><br><span class="line">n++;<span class="comment">//长度增加一个</span></span><br></pre></td></tr></table></figure><p>使用教材上的结构体描述如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LISTINSERT</span><span class="params">(SqList&amp;s,<span class="keyword">int</span> e,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;n+<span class="number">1</span>)<span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//插入位置不合理</span></span><br><span class="line"><span class="keyword">if</span>(s.len==s.size)&#123;<span class="comment">//此时无法再插入元素需要重新分配</span></span><br><span class="line">        s.elem=(<span class="keyword">int</span>*)<span class="built_in">realloc</span>(s.elem,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(INCRSIZE+s.size));</span><br><span class="line">        <span class="keyword">if</span>(!s.elem)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=s.len<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</span><br><span class="line">            s.elem[j+<span class="number">1</span>]=s.elem[j];</span><br><span class="line">        &#125;</span><br><span class="line">        s.elem[i<span class="number">-1</span>]=e;</span><br><span class="line">        s.len++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>顺序表的插入运算会涉及到元素的移动，所以不同的插入位置会导致不同的时间复杂度，考虑在最坏的情况下（即插入位置在1号位置）的时间复杂度，需要将1~n的所有数据元素向后移动一个，所以可以得出最坏情况下的时间复杂度为</p><script type="math/tex; mode=display">O(n)</script><p>考虑平均移动元素的个数，可以得到以下表达式</p><script type="math/tex; mode=display">AVG_{times}=\frac{1}{n+1}\sum_{k=1}^{n+1} {(n-k+1)}</script><p>求得结果为</p><script type="math/tex; mode=display">\frac{n}{2}</script><p>由此可以得到平均时间复杂度为</p><script type="math/tex; mode=display">O(n)</script><h3 id="4-顺序表的删除运算"><a href="#4-顺序表的删除运算" class="headerlink" title="4. 顺序表的删除运算"></a>4. 顺序表的删除运算</h3><p>顺序表的删除运算包括以下步骤：</p><ol><li>确定删除位置；</li><li>进行元素移动；</li><li>完成删除。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//位于struct中的删除方法</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;len)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;j++)&#123;</span><br><span class="line">elem[j<span class="number">-1</span>]=elem[j];<span class="comment">//原操作</span></span><br><span class="line">&#125;</span><br><span class="line">len--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>将一个顺序表中的一个元素删除所需要移动的元素的个数和删除元素的位置有关，在最坏情况下，也就是删除顺序表中的第一个元素，需要将2~n的所有元素向前移动一个，所以一共移动了n-1次，可以得到最坏时间复杂度为</p><script type="math/tex; mode=display">O(n)</script><p>平均时间复杂度分析</p><p>求平均时间复杂度就是求解选取所有删除位置时需要移动的平均次数，删除第一个需要移动n-1个元素，删除第二个需要移动n-2个元素……以此类推可得平均移动次数的计算公式</p><script type="math/tex; mode=display">AVG_{times}=\frac{1}{n}\sum_{i=1}^{n}{(n-i)}</script><p>所以可以计算得到平均移动次数为</p><script type="math/tex; mode=display">\frac{n-1}{2}</script><p>所以可以得到平均时间复杂度为</p><script type="math/tex; mode=display">O(n)</script><h3 id="5-顺序表的合并"><a href="#5-顺序表的合并" class="headerlink" title="5. 顺序表的合并"></a>5. 顺序表的合并</h3><p>顺序表的合并是将两个顺序表简单的合并到一起，不考虑元素顺序和重复。设被合并的两个顺序表的长度分别为m和n。</p><p>方法一：</p><p>直接将一个顺序表接在另一个的后面（基于插入）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqList&amp; <span class="title">MergeList1</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">a.insert(b.elem[i],a.len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>将两个顺序表进行排序后在合并到一个新的顺序表中（基于复制）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqList <span class="title">MergeList2</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line">SqList c; <span class="comment">//新表</span></span><br><span class="line"><span class="built_in">free</span>(c.elem);</span><br><span class="line">c.elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>((a.len+b.len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//不分配多余的空间</span></span><br><span class="line"><span class="keyword">int</span>* k=c.elem;</span><br><span class="line">    c.size=c.len=a.len+b.len; </span><br><span class="line">sort(a.elem,a.elem+a.len);</span><br><span class="line">sort(b.elem,b.elem+b.len);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;a.len&amp;&amp;j&lt;b.len;)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.elem[i]&lt;=b.elem[j])&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len)&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;b.len)&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>方法一的时间复杂度显然为</p><script type="math/tex; mode=display">O(n)</script><p>方法二的时间复杂度与两个顺序表的长度都相关</p><script type="math/tex; mode=display">O(m+n)</script><h3 id="6-顺序表求并集"><a href="#6-顺序表求并集" class="headerlink" title="6. 顺序表求并集"></a>6. 顺序表求并集</h3><p>顺序表求并集需要注意的问题是相同元素的排除（不再插入），所以最简单的方法就是对表a进行遍历，每次从a中拿出一个元素然后再遍历表b，若表b中不存在此元素，就将其插入（位置自选，此处选择复杂度最小的在尾部插入），否则不插入。所以方法一如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SqList::Locate(<span class="keyword">int</span> e,<span class="keyword">bool</span> (*cmp)(<span class="keyword">int</span>,<span class="keyword">int</span>))&#123;<span class="comment">//确定值e在顺序表的位置</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len&amp;&amp;!((*cmp)(e,elem[i]));i++);</span><br><span class="line"><span class="keyword">if</span>(i==len)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SqList&amp; <span class="title">unionList1</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;<span class="comment">//结果保存于a中</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a.Locate(b.elem[i],cmp)==<span class="number">-1</span>)&#123;</span><br><span class="line"> a.insert(b.elem[i],a.len+<span class="number">1</span>);<span class="comment">//在尾部插入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;<span class="comment">//原操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>由于每次取出b中的元素后，都要对a遍历一遍，所以比较总次数为m*n。所以时间复杂度为</p><script type="math/tex; mode=display">O(mn)</script><p>虽然这种方法思路简单，但是时间复杂度较大。</p><p>方法二：</p><p>造成方法一时间耗费长的主要原因是每次都对顺序表进行完整的遍历，所以可以先对被比较的顺序表进行排序（使用升序）。</p><p>算法思路</p><ol><li>取出b中的一个元素x；</li><li>从a的第一个元素开始遍历；</li><li>找a中第一个不满足比x小的元素y；</li><li>若x==y则不插入，否则插入。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqList&amp; <span class="title">unionList3</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">        sort(a.elem,a.elem+a.len);<span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b.elem[i]&gt;a.elem[j]&amp;&amp;j&lt;a.len)j++;</span><br><span class="line"><span class="keyword">if</span>(j==a.len||b.elem[i]&lt;a.elem[j])&#123;</span><br><span class="line">a.insert(b.elem[i],j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><p>由于无法确定a被遍历的元素个数，所以选择最坏情况分析，在最坏情况下（b和a中的元素全部不合适）为</p><script type="math/tex; mode=display">O(mn)</script><p>方法三：</p><p>使用基于复制的方法，需要将两个顺序表都进行排序（使用升序）。</p><p>算法思路</p><ol><li>将a和b两个顺序表进行升序排序；</li><li>分配一段连续的存储空间c作为结果；</li><li>设定两个指针pa和pb；</li><li>使用pa和pb对a和b进行扫描；</li><li>比较pa和pb所指向的值的大小；</li><li>大小分为三种情况，*pa==*pb，*pa&gt;*pb，*pa&lt;*pb，分别对应三种操作。</li></ol><p>*pa==*pb：将任意一方的值赋值给c，然后pa++；pb++；pc++；</p><p>*pa&gt;*pb：将*pb赋值给c，pb++；pc++；</p><p>*pa&lt;*pb：将*pa赋值给c，pa++；pc++；</p><p>直到a或b已经走到尽头，然后将没有走到尽头的那一方的后续元素接在c后面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SqList <span class="title">unionList2</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line">SqList c;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=j=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(c.elem);</span><br><span class="line">c.elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>((a.len+b.len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span>*k=c.elem;</span><br><span class="line">c.size=a.len+b.len;</span><br><span class="line">c.len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!c.elem)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">sort(a.elem,a.elem+a.len);<span class="comment">//先排序 暂时不考虑它造成的时间消耗</span></span><br><span class="line">sort(b.elem,b.elem+b.len);</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len&amp;&amp;j&lt;b.len)&#123;</span><br><span class="line"><span class="keyword">switch</span>(a.elem[i]&lt;=b.elem[j])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line"><span class="keyword">if</span>(a.elem[i]&lt;b.elem[j])&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;<span class="comment">//注意c的长度的标记，因为c的最终长度&lt;=a.len+b.len</span></span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">c.len++;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len)&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;b.len)&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">c.len++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法复杂度分析</p><p>由于原操作是给c赋值，所以对c进行赋值的次数统计得到总赋值次数&lt;=m+n，所以可以得到时间复杂度为</p><script type="math/tex; mode=display">O(m+n)</script><p>相比直接简单求并集，复杂度有所减小，但是出现了额外的辅助空间，即c所代表的一段空间。</p><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>需要了解：</p><ol><li>顺序表属于线性表；</li><li>顺序表的定义；</li><li>顺序表的基本操作（增删改查，合并，并集）及其优化算法和复杂度；</li><li>顺序表的结构；</li><li>一般使用数组代替顺序表进行相关操作。</li></ol><h3 id="8-测试程序"><a href="#8-测试程序" class="headerlink" title="8. 测试程序"></a>8. 测试程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INITSIZE=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INCRESIZE=<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SqList</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span>* elem;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//以sizeof(int)做单位 </span></span><br><span class="line">SqList()&#123;</span><br><span class="line">elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(INITSIZE*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span>(!elem)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"空间分配失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line">size=<span class="keyword">sizeof</span>(elem)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">&#125;</span><br><span class="line">SqList(SqList&amp;s);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(<span class="keyword">int</span> e,<span class="keyword">bool</span> (*cmp)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> e,<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;len)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;j++)&#123;</span><br><span class="line">elem[j<span class="number">-1</span>]=elem[j];</span><br><span class="line">&#125;</span><br><span class="line">len--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line">~SqList()&#123;</span><br><span class="line"><span class="built_in">free</span>(elem);</span><br><span class="line">&#125;</span><br><span class="line">SqList&amp;<span class="keyword">operator</span>=(SqList&amp;t)&#123;</span><br><span class="line"><span class="built_in">free</span>(elem);</span><br><span class="line">elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(t.size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">len=t.len;</span><br><span class="line">size=t.size;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.len;i++)&#123;</span><br><span class="line">elem[i]=t.elem[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line">SqList::SqList(SqList&amp;s)&#123;</span><br><span class="line">elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(s.size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">len=s.len;</span><br><span class="line">size=s.size;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.len;i++)&#123;</span><br><span class="line">elem[i]=s.elem[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;out,<span class="keyword">const</span> SqList&amp;s)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.len;i++)&#123;</span><br><span class="line">out&lt;&lt;s.elem[i];</span><br><span class="line">&#125;</span><br><span class="line">out&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> SqList::Locate(<span class="keyword">int</span> e,<span class="keyword">bool</span> (*cmp)(<span class="keyword">int</span>,<span class="keyword">int</span>))&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len&amp;&amp;!((*cmp)(e,elem[i]));i++);</span><br><span class="line"><span class="keyword">if</span>(i==len)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SqList::insert(<span class="keyword">int</span> e,<span class="keyword">int</span> i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;len+<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">if</span>(len==size)&#123;</span><br><span class="line">elem=(<span class="keyword">int</span>*)<span class="built_in">realloc</span>(elem,(size+INCRESIZE)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!elem)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</span><br><span class="line">elem[j+<span class="number">1</span>]=elem[j];</span><br><span class="line">&#125;</span><br><span class="line">elem[i<span class="number">-1</span>]=e;</span><br><span class="line">len++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SqList <span class="title">MergeList2</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line">SqList c; </span><br><span class="line"><span class="built_in">free</span>(c.elem);</span><br><span class="line">c.elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>((a.len+b.len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span>* k=c.elem;</span><br><span class="line">c.len=a.len+b.len; </span><br><span class="line">sort(a.elem,a.elem+a.len);</span><br><span class="line">sort(b.elem,b.elem+b.len);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;a.len&amp;&amp;j&lt;b.len;)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.elem[i]&lt;=b.elem[j])&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len)&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;b.len)&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SqList&amp; <span class="title">MergeList1</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">a.insert(b.elem[i],a.len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SqList&amp; <span class="title">unionList1</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;<span class="comment">//结果保存于a中</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a.Locate(b.elem[i],cmp)==<span class="number">-1</span>)&#123;</span><br><span class="line"> a.insert(b.elem[i],a.len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SqList&amp; <span class="title">unionList3</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">sort(a.elem,a.elem+a.len);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b.elem[i]&gt;a.elem[j]&amp;&amp;j&lt;a.len)j++;</span><br><span class="line"><span class="keyword">if</span>(j==a.len||b.elem[i]&lt;a.elem[j])&#123;</span><br><span class="line">a.insert(b.elem[i],j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">SqList <span class="title">unionList2</span><span class="params">(SqList&amp;a,SqList&amp;b)</span></span>&#123;</span><br><span class="line">SqList c;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=j=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(c.elem);</span><br><span class="line">c.elem=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>((a.len+b.len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span>*k=c.elem;</span><br><span class="line">c.size=a.len+b.len;</span><br><span class="line">c.len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!c.elem)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">sort(a.elem,a.elem+a.len);</span><br><span class="line">sort(b.elem,b.elem+b.len);</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len&amp;&amp;j&lt;b.len)&#123;</span><br><span class="line"><span class="keyword">switch</span>(a.elem[i]&lt;=b.elem[j])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line"><span class="keyword">if</span>(a.elem[i]&lt;b.elem[j])&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">c.len++;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.len)&#123;</span><br><span class="line">*k++=a.elem[i];</span><br><span class="line">c.len++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;b.len)&#123;</span><br><span class="line">*k++=b.elem[j];</span><br><span class="line">c.len++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqList sq1,sq2;</span><br><span class="line"><span class="keyword">int</span> len1,len2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;len1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;len2;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入顺序表1的数据:"</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">sq1.insert(a,sq1.len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">SqList t=sq1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入顺序表2的数据:"</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">sq2.insert(a,sq2.len+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"基于复制的合并结果串为:"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;MergeList2(sq1,sq2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"基于插入的合并结果串为(改变后的sq1):"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;MergeList1(sq1,sq2);</span><br><span class="line">sq1=t;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"基于复制的两串求并集为:"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;unionList2(sq1,sq2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"基于插入的并集结果串为(改变后的sq1):"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;unionList1(sq1,sq2); </span><br><span class="line">sq1=t;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"使用排序后的sq1求并集:"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;unionList3(sq1,sq2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;顺序表是线性表的一种，顺序表的特殊性在于顺序表用一组地址连续的存储单元依次存储线性表的数据元素，所以就导致了顺序表这种数据结构中数据元素之间的逻辑关系和物理存储位置是一致的，所以在顺序表中，已知一个数据元素的地址，可以推算出其他所有元素的
      
    
    </summary>
    
      <category term="数据结构" scheme="https://yys123456.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="顺序表" scheme="https://yys123456.github.io/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>1024</title>
    <link href="https://yys123456.github.io/2019/07/12/PAT-1024/"/>
    <id>https://yys123456.github.io/2019/07/12/PAT-1024/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2019-08-10T05:23:15.271Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">char</span> c=s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'+'</span>||s[i]==<span class="string">'-'</span>)&#123;</span><br><span class="line">c1=s[i];</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span>(i&lt;s.length())&#123;</span><br><span class="line">p=p*<span class="number">10</span>+s[i]-<span class="string">'0'</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len=s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;len;i++)&#123;</span><br><span class="line">s[i<span class="number">-1</span>]=s[i];</span><br><span class="line">&#125;</span><br><span class="line">len--;</span><br><span class="line"><span class="built_in">string</span> s1=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i]!=<span class="string">'E'</span>;i++)&#123;</span><br><span class="line">s1+=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c1==<span class="string">'+'</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(p+<span class="number">2</span>&gt;s1.length())s1+=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(p+<span class="number">2</span>&lt;s1.length())s1.insert(p+<span class="number">2</span>,<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'+'</span>)</span><br><span class="line">s1.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">string</span> s2=<span class="string">"."</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p;i++)&#123;</span><br><span class="line">s2+=<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">s2=<span class="string">'0'</span>+s2;</span><br><span class="line"></span><br><span class="line">s1.insert(<span class="number">1</span>,s2);</span><br><span class="line"><span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'+'</span>)</span><br><span class="line">s1.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
      <category term="pat" scheme="https://yys123456.github.io/categories/pat/"/>
    
    
      <category term="1024" scheme="https://yys123456.github.io/tags/1024/"/>
    
  </entry>
  
</feed>
